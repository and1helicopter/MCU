; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\oscil.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\oscil.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\oscil.crf PERIPH\Oscil.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  SavePart PROC
;;;19     
;;;20     void SavePart( int OscilNum, unsigned int PartNum){
000000  b430              PUSH     {r4,r5}
;;;21     	/*	*/
;;;22     	int i;
;;;23     	if(PartNum < 5)	{
;;;24     		for(i = 0; i < 256; i++ )BufferSaveToMemory[i] = ((unsigned short *)(&WorkOscilConfig))[i + 256*PartNum];
000002  f2400300          MOVW     r3,#:LOWER16: ||.bss||+512
000006  f2c00300          MOVT     r3,#:UPPER16: ||.bss||+512
00000a  f5a37c00          SUB      r12,r3,#0x200
00000e  2905              CMP      r1,#5                 ;23
000010  bf38              IT       CC
000012  2000              MOVCC    r0,#0
000014  d20b              BCS      |L1.46|
                  |L1.22|
000016  eb002201          ADD      r2,r0,r1,LSL #8
00001a  f8332012          LDRH     r2,[r3,r2,LSL #1]
00001e  f82c2010          STRH     r2,[r12,r0,LSL #1]
000022  1c40              ADDS     r0,r0,#1
000024  f5b07f80          CMP      r0,#0x100
000028  dbf5              BLT      |L1.22|
;;;25     		return;
;;;26     	}
;;;27     	if(PartNum == 4)
;;;28     	{
;;;29     		BufferSaveToMemory[251] = ptrOscilCmnd->OscilEnd[OscilNum];
;;;30     		BufferSaveToMemory[252] = ptrOscilCmnd->OscilHistoryCount;
;;;31     		BufferSaveToMemory[253] = ptrOscilCmnd->OscilDateTime[OscilNum];
;;;32     		BufferSaveToMemory[254] = ptrOscilCmnd->OscilSampleRate;
;;;33     		BufferSaveToMemory[255] = ptrOscilCmnd->OscilSampleSize;	
;;;34     		return;
;;;35     	}
;;;36     	if(PartNum > 4)
;;;37     	{
;;;38     		for(i = 0; i < 256; i++ )BufferSaveToMemory[i] = ptrExtMem[i + 256*(PartNum - 4) + OscilNum*(WorkOscilConfig.OscilSize >> 1)];
;;;39     		return;
;;;40     	}
;;;41     }
00002a  bc30              POP      {r4,r5}
00002c  4770              BX       lr
                  |L1.46|
00002e  2200              MOVS     r2,#0                 ;38
000030  f2400400          MOVW     r4,#:LOWER16: ||.data||;29
000034  f2c00400          MOVT     r4,#:UPPER16: ||.data||;29
000038  f8d33080          LDR      r3,[r3,#0x80]         ;38
00003c  6924              LDR      r4,[r4,#0x10]         ;38
00003e  085b              LSRS     r3,r3,#1              ;38
                  |L1.64|
000040  eb022501          ADD      r5,r2,r1,LSL #8       ;38
000044  fb005503          MLA      r5,r0,r3,r5           ;38
000048  eb040545          ADD      r5,r4,r5,LSL #1       ;38
00004c  f5a55580          SUB      r5,r5,#0x1000         ;38
000050  f8b55800          LDRH     r5,[r5,#0x800]        ;38
000054  f82c5012          STRH     r5,[r12,r2,LSL #1]    ;38
000058  1c52              ADDS     r2,r2,#1              ;38
00005a  f5b27f80          CMP      r2,#0x100             ;38
00005e  dbef              BLT      |L1.64|
000060  bc30              POP      {r4,r5}
000062  4770              BX       lr
;;;42     
                          ENDP

                  OscilWriteToMemory PROC
;;;43     void OscilWriteToMemory(unsigned short NumOscil){
000064  e92d01f0          PUSH     {r4-r8}
;;;44     	
;;;45     	//FILE *file; 
;;;46     	char *fname = "\test\test.txt";
;;;47     	unsigned int PartNum = 0;
000068  2200              MOVS     r2,#0
;;;48     	int PartAll;
;;;49     	if (((WorkOscilConfig.OscilSize >> 1)%512) == 0) PartAll = (WorkOscilConfig.OscilSize >> 1)/512 + 5; 
00006a  f2400800          MOVW     r8,#:LOWER16: ||.bss||+512
00006e  f2c00800          MOVT     r8,#:UPPER16: ||.bss||+512
000072  f8d81080          LDR      r1,[r8,#0x80]  ; WorkOscilConfig
000076  f24033fe          MOV      r3,#0x3fe
00007a  4219              TST      r1,r3
00007c  bf0c              ITE      EQ
00007e  2305              MOVEQ    r3,#5
;;;50     	else PartAll = (WorkOscilConfig.OscilSize >> 1)/512 + 6;
000080  2306              MOVNE    r3,#6
000082  eb132591          ADDS     r5,r3,r1,LSR #10
;;;51     	//if ((file = fopen(fname,"wb")) == NULL){ return;}
;;;52      // else{
;;;53     		for (PartNum = 0; PartNum	< PartAll; PartNum++){
;;;54     			SavePart(NumOscil, PartNum);
;;;55     	//		fwrite (&BufferSaveToMemory, sizeof(unsigned short),256, file);
;;;56         }
;;;57     	//}
;;;58     	//fclose(file);
;;;59     
;;;60     };
000086  bf04              ITT      EQ
000088  e8bd01f0          POPEQ    {r4-r8}
00008c  4770              BXEQ     lr
00008e  f2400300          MOVW     r3,#:LOWER16: ||.bss||
000092  f2c00300          MOVT     r3,#:UPPER16: ||.bss||
000096  f2400c00          MOVW     r12,#:LOWER16: ||.data||
00009a  f2c00c00          MOVT     r12,#:UPPER16: ||.data||
00009e  f8dc6010          LDR      r6,[r12,#0x10]
0000a2  084f              LSRS     r7,r1,#1
                  |L1.164|
0000a4  4684              MOV      r12,r0                ;54
0000a6  2a05              CMP      r2,#5                 ;54
0000a8  f04f0100          MOV      r1,#0                 ;54
0000ac  d20a              BCS      |L1.196|
                  |L1.174|
0000ae  eb012c02          ADD      r12,r1,r2,LSL #8      ;54
0000b2  f838c01c          LDRH     r12,[r8,r12,LSL #1]   ;54
0000b6  f823c011          STRH     r12,[r3,r1,LSL #1]    ;54
0000ba  1c49              ADDS     r1,r1,#1              ;54
0000bc  f5b17f80          CMP      r1,#0x100             ;54
0000c0  dbf5              BLT      |L1.174|
0000c2  e00f              B        |L1.228|
                  |L1.196|
0000c4  eb012402          ADD      r4,r1,r2,LSL #8       ;54
0000c8  fb0c4407          MLA      r4,r12,r7,r4          ;54
0000cc  eb060444          ADD      r4,r6,r4,LSL #1       ;54
0000d0  f5a45480          SUB      r4,r4,#0x1000         ;54
0000d4  f8b44800          LDRH     r4,[r4,#0x800]        ;54
0000d8  f8234011          STRH     r4,[r3,r1,LSL #1]     ;54
0000dc  1c49              ADDS     r1,r1,#1              ;54
0000de  f5b17f80          CMP      r1,#0x100             ;54
0000e2  dbef              BLT      |L1.196|
                  |L1.228|
0000e4  1c52              ADDS     r2,r2,#1              ;54
0000e6  42aa              CMP      r2,r5                 ;53
0000e8  d3dc              BCC      |L1.164|
0000ea  e8bd01f0          POP      {r4-r8}
0000ee  4770              BX       lr
;;;61     
                          ENDP

                  FindOldOscil PROC
;;;66     */
;;;67     int32_t FindOldOscil(void) {
0000f0  b470              PUSH     {r4-r6}
;;;68     	int32_t OldOscil = 0, i;
0000f2  2100              MOVS     r1,#0
;;;69     	
;;;70     	//Проверка на занятость осциллограммы 
;;;71     //  if(){
;;;72     //    
;;;73     //  }
;;;74     	
;;;75     	if (WorkOscilConfig.OscilQuantity == 1 || WorkOscilConfig.OscilEnable == 3|| WorkOscilConfig.OscilEnable == 4) {return 0; } 
0000f4  f2400000          MOVW     r0,#:LOWER16: ||.bss||+512
0000f8  f2c00000          MOVT     r0,#:UPPER16: ||.bss||+512
0000fc  f9b04084          LDRSH    r4,[r0,#0x84]  ; WorkOscilConfig
000100  2c01              CMP      r4,#1
000102  bf1d              ITTTE    NE
000104  f8b0008c          LDRHNE   r0,[r0,#0x8c]  ; WorkOscilConfig
000108  2803              CMPNE    r0,#3
00010a  2804              CMPNE    r0,#4
00010c  2000              MOVEQ    r0,#0
;;;76     	
;;;77     	for (i = 1; i < WorkOscilConfig.OscilQuantity; i++) 
;;;78       {
;;;79     		if (ptrOscilCmnd->OscilDateTime[(i*2) + 0] > ptrOscilCmnd->OscilDateTime[(OldOscil*2) + 0]) {continue;} 
;;;80     		if (ptrOscilCmnd->OscilDateTime[(i*2) + 0] < ptrOscilCmnd->OscilDateTime[(OldOscil*2) + 0]) {OldOscil = i; continue;} 
;;;81     		
;;;82     		if (ptrOscilCmnd->OscilDateTime[(i*2) + 1] > ptrOscilCmnd->OscilDateTime[(OldOscil*2) + 1]) {continue;} 
;;;83     		if (ptrOscilCmnd->OscilDateTime[(i*2) + 1] < ptrOscilCmnd->OscilDateTime[(OldOscil*2) + 1]) {OldOscil = i; continue;} 
;;;84     		
;;;85     		//if (ptrOscilCmnd->OscilDateTime[(i*3) + 2] < ptrOscilCmnd->OscilDateTime[(OldOscil*3) + 2]) {OldOscil = i;} 	
;;;86     	}		
;;;87     
;;;88     	ptrOscilCmnd->OscilStatus[OldOscil] = 0;
;;;89       
;;;90     	return (OldOscil + 1);
;;;91     }
00010e  bf04              ITT      EQ
000110  bc70              POPEQ    {r4-r6}
000112  4770              BXEQ     lr
000114  f04f0001          MOV      r0,#1                 ;77
000118  f2400200          MOVW     r2,#:LOWER16: ||.data||;79
00011c  f2c00200          MOVT     r2,#:UPPER16: ||.data||;79
000120  6992              LDR      r2,[r2,#0x18]         ;79
000122  2c01              CMP      r4,#1                 ;77
000124  dd15              BLE      |L1.338|
                  |L1.294|
000126  eb020cc0          ADD      r12,r2,r0,LSL #3      ;79
00012a  eb0203c1          ADD      r3,r2,r1,LSL #3       ;79
00012e  f8dc5110          LDR      r5,[r12,#0x110]       ;79
000132  f8d36110          LDR      r6,[r3,#0x110]        ;79
000136  42b5              CMP      r5,r6                 ;79
000138  d807              BHI      |L1.330|
00013a  d305              BCC      |L1.328|
00013c  f8dcc114          LDR      r12,[r12,#0x114]      ;82
000140  f8d33114          LDR      r3,[r3,#0x114]        ;82
000144  4563              CMP      r3,r12                ;82
000146  d900              BLS      |L1.330|
                  |L1.328|
000148  4601              MOV      r1,r0                 ;83
                  |L1.330|
00014a  f1000001          ADD      r0,r0,#1              ;83
00014e  4284              CMP      r4,r0                 ;77
000150  dce9              BGT      |L1.294|
                  |L1.338|
000152  eb020241          ADD      r2,r2,r1,LSL #1       ;88
000156  2000              MOVS     r0,#0                 ;88
000158  8210              STRH     r0,[r2,#0x10]         ;88
00015a  bc70              POP      {r4-r6}
00015c  1c48              ADDS     r0,r1,#1              ;90
00015e  4770              BX       lr
;;;92     /* 
                          ENDP

                  SaveSample PROC
;;;94     */
;;;95     void SaveSample(int32_t OscilNum, int32_t OscilSize, int32_t OscilSampleSize, int32_t OscilCounter) {
000160  b4f0              PUSH     {r4-r7}
;;;96     int32_t ArrayIndex;
;;;97     int32_t i;
;;;98     uint16_t *WorkPtr;  
;;;99       
;;;100      /* Расчет индекса массива для записи данных                       */
;;;101      ArrayIndex = (OscilNum * OscilSize + OscilSampleSize * OscilCounter) >> 1;
000162  4348              MULS     r0,r1,r0
000164  fb020003          MLA      r0,r2,r3,r0
000168  1040              ASRS     r0,r0,#1
;;;102      
;;;103      /* Проверка, что индекс массива не выходит за допустимые пределы  */
;;;104      if (ArrayIndex < 0) return;
;;;105      if (ArrayIndex > ((SizeMemory >> 1) - 1)) return;
;;;106      if ((ArrayIndex + (OscilSampleSize >> 1)) > (SizeMemory >> 1)) return;
;;;107      
;;;108      /* Записываем данные в зависимости от размерности                 */
;;;109      for (i = 0; i < WorkOscilConfig.OscilChNum; i++)
;;;110      {
;;;111        /* Адрес осциллографируемых данных */
;;;112        WorkPtr = ptrDataBlock + WorkOscilConfig.OscilAddr[i];
;;;113        
;;;114        /* В зависимости от размерности, пишем 2, 4 или 8 байт          */
;;;115        if ((WorkOscilConfig.OscilTypeData[i] & 0x0300) == 0x0300) 
;;;116        {
;;;117          *((uint64_t *)(&ptrExtMem[ArrayIndex])) = *((uint64_t *)(WorkPtr));     //8 байт
;;;118          ArrayIndex += 4;
;;;119        }
;;;120        else if ((WorkOscilConfig.OscilTypeData[i] & 0x0300) == 0x0200)           
;;;121        {
;;;122          *((uint32_t *)(&ptrExtMem[ArrayIndex])) = *((uint32_t *)(WorkPtr));     //4 байта
;;;123          ArrayIndex += 2;      
;;;124        } 
;;;125        else if ((WorkOscilConfig.OscilTypeData[i] & 0x0300) == 0x0100)
;;;126        {
;;;127          ptrExtMem[ArrayIndex++] = *(WorkPtr);                                   //2 байта
;;;128        } 
;;;129      }
;;;130    }
00016a  bf44              ITT      MI
00016c  bcf0              POPMI    {r4-r7}
00016e  4770              BXMI     lr
000170  f5b02f80          CMP      r0,#0x40000           ;105
000174  bfa4              ITT      GE
000176  bcf0              POPGE    {r4-r7}
000178  4770              BXGE     lr
00017a  eb000162          ADD      r1,r0,r2,ASR #1       ;106
00017e  f5b12f80          CMP      r1,#0x40000           ;106
000182  bfc4              ITT      GT
000184  bcf0              POPGT    {r4-r7}
000186  4770              BXGT     lr
000188  2100              MOVS     r1,#0                 ;109
00018a  f2400400          MOVW     r4,#:LOWER16: ||.bss||+512;109
00018e  f2c00400          MOVT     r4,#:UPPER16: ||.bss||+512;109
000192  f9b42086          LDRSH    r2,[r4,#0x86]         ;109  ; WorkOscilConfig
000196  2a00              CMP      r2,#0                 ;109
000198  bfdc              ITT      LE
00019a  bcf0              POPLE    {r4-r7}
00019c  4770              BXLE     lr
00019e  f44f7640          MOV      r6,#0x300             ;115
0001a2  f2400200          MOVW     r2,#:LOWER16: ||.data||;112
0001a6  f2c00200          MOVT     r2,#:UPPER16: ||.data||;112
0001aa  e9d25303          LDRD     r5,r3,[r2,#0xc]       ;112
                  |L1.430|
0001ae  eb040241          ADD      r2,r4,r1,LSL #1       ;112
0001b2  f834c011          LDRH     r12,[r4,r1,LSL #1]    ;115
0001b6  f8b22040          LDRH     r2,[r2,#0x40]         ;112
0001ba  ea36070c          BICS     r7,r6,r12             ;115
0001be  eb050242          ADD      r2,r5,r2,LSL #1       ;112
0001c2  d008              BEQ      |L1.470|
0001c4  f40c7c40          AND      r12,r12,#0x300        ;120
0001c8  f5bc7f00          CMP      r12,#0x200            ;120
0001cc  d00b              BEQ      |L1.486|
0001ce  f5bc7f80          CMP      r12,#0x100            ;125
0001d2  d00d              BEQ      |L1.496|
0001d4  e010              B        |L1.504|
                  |L1.470|
0001d6  e9d27c00          LDRD     r7,r12,[r2,#0]        ;125
0001da  eb030240          ADD      r2,r3,r0,LSL #1       ;117
0001de  1d00              ADDS     r0,r0,#4              ;117
0001e0  e9c27c00          STRD     r7,r12,[r2,#0]        ;117
0001e4  e008              B        |L1.504|
                  |L1.486|
0001e6  6812              LDR      r2,[r2,#0]            ;122
0001e8  f8432010          STR      r2,[r3,r0,LSL #1]     ;122
0001ec  1c80              ADDS     r0,r0,#2              ;122
0001ee  e003              B        |L1.504|
                  |L1.496|
0001f0  8812              LDRH     r2,[r2,#0]            ;127
0001f2  f8232010          STRH     r2,[r3,r0,LSL #1]     ;127
0001f6  1c40              ADDS     r0,r0,#1              ;127
                  |L1.504|
0001f8  f9b42086          LDRSH    r2,[r4,#0x86]         ;109  ; WorkOscilConfig
0001fc  1c49              ADDS     r1,r1,#1              ;109
0001fe  428a              CMP      r2,r1                 ;109
000200  dcd5              BGT      |L1.430|
000202  bcf0              POP      {r4-r7}
000204  4770              BX       lr
;;;131    
                          ENDP

                  FindActiveOscil PROC
;;;132    int32_t FindActiveOscil(void) {
000206  2300              MOVS     r3,#0
;;;133    int32_t i;
;;;134    int32_t OscilNumFree = 0;
;;;135    int32_t OscilNumActive = 0;
000208  4618              MOV      r0,r3
;;;136    int32_t TempOscilStatus;
;;;137    
;;;138    	/* Поиск активных осциллограмм	*/
;;;139    	for (i = WorkOscilConfig.OscilQuantity; i > 0; i--) 
00020a  f2400100          MOVW     r1,#:LOWER16: ||.bss||+512
00020e  f2c00100          MOVT     r1,#:UPPER16: ||.bss||+512
000212  f9b11084          LDRSH    r1,[r1,#0x84]  ; WorkOscilConfig
000216  2900              CMP      r1,#0
;;;140      {
;;;141    		TempOscilStatus = ptrOscilCmnd->OscilStatus[i-1]; 
000218  bfc2              ITTT     GT
00021a  f2400200          MOVWGT   r2,#:LOWER16: ||.data||
00021e  f2c00200          MOVTGT   r2,#:UPPER16: ||.data||
000222  f8d2c018          LDRGT    r12,[r2,#0x18]
000226  dd0f              BLE      |L1.584|
                  |L1.552|
000228  eb0c0241          ADD      r2,r12,r1,LSL #1
00022c  89d2              LDRH     r2,[r2,#0xe]
;;;142    		if (TempOscilStatus == 0) 
00022e  2a00              CMP      r2,#0
;;;143        {
;;;144          OscilNumFree = i; 
000230  bf08              IT       EQ
000232  460b              MOVEQ    r3,r1
000234  d002              BEQ      |L1.572|
;;;145          continue;
;;;146        }
;;;147    		if (TempOscilStatus >= 4) continue;
000236  2a04              CMP      r2,#4
;;;148    		OscilNumActive = i;
000238  bfb8              IT       LT
00023a  4608              MOVLT    r0,r1
                  |L1.572|
00023c  1e49              SUBS     r1,r1,#1
00023e  2900              CMP      r1,#0                 ;139
000240  dcf2              BGT      |L1.552|
;;;149    	}	
;;;150    
;;;151    	/* Обрабатываем статус активной осциллограммы	*/
;;;152    	if (OscilNumActive == 0) {OscilNumActive = OscilNumFree;}           /* Нет активных - берем свободную */
000242  2800              CMP      r0,#0
;;;153    	if (OscilNumActive == 0) {OscilNumActive = FindOldOscil();}         /* Нет свободных - ищем старую    */
;;;154      if (OscilNumActive == 0) return 0;                                  /* Нет старых - выходим           */
;;;155      return OscilNumActive; 
;;;156    }
000244  bf18              IT       NE
000246  4770              BXNE     lr
                  |L1.584|
000248  0018              MOVS     r0,r3                 ;152
00024a  bf18              IT       NE
00024c  4770              BXNE     lr
00024e  e7fe              B        FindOldOscil
;;;157    
                          ENDP

                  TimeStamp PROC
;;;158    void TimeStamp(int32_t OscilNum) {
000250  f2400100          MOVW     r1,#:LOWER16: Metro
;;;159    
;;;160      /* Метка времени */
;;;161      ptrOscilCmnd->OscilDateTime[(OscilNum * 2) + 0] = EvPrms.RTC_Date & 0x00FF1F3F;   /*Убираем день недели из слова даты */
000254  f2c00100          MOVT     r1,#:UPPER16: Metro
000258  f641733f          MOV      r3,#0x1f3f
00025c  684a              LDR      r2,[r1,#4]  ; Metro
00025e  f2c003ff          MOVT     r3,#0xff
000262  4013              ANDS     r3,r3,r2
000264  f2400200          MOVW     r2,#:LOWER16: ||.data||
000268  f2c00200          MOVT     r2,#:UPPER16: ||.data||
00026c  6992              LDR      r2,[r2,#0x18]  ; ptrOscilCmnd
00026e  eb0200c0          ADD      r0,r2,r0,LSL #3
;;;162      ptrOscilCmnd->OscilDateTime[(OscilNum * 2) + 1] = EvPrms.RTC_Time;
000272  f8c03110          STR      r3,[r0,#0x110]
000276  6889              LDR      r1,[r1,#8]  ; Metro
000278  f8c01114          STR      r1,[r0,#0x114]
;;;163      //ptrOscilCmnd->OscilDateTime[(OscilNum * 2) + 2] = EvPrms.RTC_SSC;  
;;;164      
;;;165    }
00027c  4770              BX       lr
;;;166    
                          ENDP

                  WriteSample PROC
;;;167    void WriteSample(void) {
00027e  b5f0              PUSH     {r4-r7,lr}
000280  2300              MOVS     r3,#0
000282  4618              MOV      r0,r3
000284  f2400600          MOVW     r6,#:LOWER16: ||.bss||+512
000288  f2c00600          MOVT     r6,#:UPPER16: ||.bss||+512
00028c  f9b61084          LDRSH    r1,[r6,#0x84]  ; WorkOscilConfig
000290  461c              MOV      r4,r3
000292  f2400500          MOVW     r5,#:LOWER16: ||.data||
000296  f2c00500          MOVT     r5,#:UPPER16: ||.data||
00029a  2900              CMP      r1,#0
00029c  bfc8              IT       GT
00029e  f8d5c018          LDRGT    r12,[r5,#0x18]
0002a2  dd0d              BLE      |L1.704|
                  |L1.676|
0002a4  eb0c0241          ADD      r2,r12,r1,LSL #1
0002a8  89d2              LDRH     r2,[r2,#0xe]
0002aa  2a00              CMP      r2,#0
0002ac  bf08              IT       EQ
0002ae  460b              MOVEQ    r3,r1
0002b0  d002              BEQ      |L1.696|
0002b2  2a04              CMP      r2,#4
0002b4  bfb8              IT       LT
0002b6  4608              MOVLT    r0,r1
                  |L1.696|
0002b8  1e49              SUBS     r1,r1,#1
0002ba  2900              CMP      r1,#0
0002bc  dcf2              BGT      |L1.676|
0002be  b930              CBNZ     r0,|L1.718|
                  |L1.704|
0002c0  0018              MOVS     r0,r3
0002c2  d104              BNE      |L1.718|
0002c4  f7fffffe          BL       FindOldOscil
0002c8  2800              CMP      r0,#0
0002ca  bf08              IT       EQ
0002cc  4620              MOVEQ    r0,r4
                  |L1.718|
0002ce  1e40              SUBS     r0,r0,#1
;;;168    static int32_t OscilRecordCounter = 0;      /* Счетчик сделанных записей в осцилограмме     */
;;;169    static int32_t OscilRemainCounter = 0;      /* Счетчик оставшихся записей после предыстории */
;;;170    int32_t WorkOscilNum;
;;;171     
;;;172      WorkOscilNum = FindActiveOscil();
;;;173      if (WorkOscilNum-- == 0) return;
;;;174          
;;;175      switch (ptrOscilCmnd->OscilStatus[WorkOscilNum]) 
;;;176      {
;;;177        case 0x00:  {
;;;178                      OscilRecordCounter = 0;
;;;179                      OscilRemainCounter = ptrOscilCmnd->OscilRemainingCount;
;;;180                      ptrOscilCmnd->OscilStatus[WorkOscilNum] = 1;
;;;181                    }
;;;182        
;;;183        case 0x01:  {
;;;184                      if ((OscilRecordCounter + 1) >= ptrOscilCmnd->OscilHistoryCount) {ptrOscilCmnd->OscilStatus[WorkOscilNum] = 2;}
;;;185                      if ((OscilRecordCounter + 1) <= ptrOscilCmnd->OscilHistoryCount) break;
;;;186                    } 
;;;187        
;;;188        case 0x02:  {
;;;189                      if (ptrOscilCmnd->OscilNeed == 0) break;
;;;190    
;;;191          if (StdPrms.CycleCounter) break;  //Временно, для проверки осциллографа
;;;192          
;;;193                      ptrOscilCmnd->OscilNeed--;
;;;194                      TimeStamp(WorkOscilNum);
;;;195                      ptrOscilCmnd->OscilStatus[WorkOscilNum] = 3;  
;;;196                    } 
;;;197        
;;;198        case 0x03:  { 
;;;199                      if (OscilRemainCounter) {OscilRemainCounter--;}
;;;200                      if (OscilRemainCounter == 0) 
;;;201                      {
;;;202                        ptrOscilCmnd->OscilEnd[WorkOscilNum] = OscilRecordCounter;   
;;;203                        ptrOscilCmnd->OscilStatus[WorkOscilNum] = 4;
;;;204                      }
;;;205                    } break;   
;;;206      } //switch     
;;;207    
;;;208      
;;;209      SaveSample(WorkOscilNum, WorkOscilConfig.OscilSize, ptrOscilCmnd->OscilSampleSize, OscilRecordCounter++);
;;;210    
;;;211      if (OscilRecordCounter >= ptrOscilCmnd->OscilLenght) OscilRecordCounter = 0; 
;;;212    }
0002d0  bf38              IT       CC
0002d2  bdf0              POPCC    {r4-r7,pc}
0002d4  69a9              LDR      r1,[r5,#0x18]         ;175  ; ptrOscilCmnd
0002d6  eb010240          ADD      r2,r1,r0,LSL #1       ;175
0002da  8a13              LDRH     r3,[r2,#0x10]         ;175
0002dc  b133              CBZ      r3,|L1.748|
0002de  2b01              CMP      r3,#1                 ;175
0002e0  d00a              BEQ      |L1.760|
0002e2  2b02              CMP      r3,#2                 ;175
0002e4  d016              BEQ      |L1.788|
0002e6  2b03              CMP      r3,#3                 ;175
0002e8  d030              BEQ      |L1.844|
0002ea  e03b              B        |L1.868|
                  |L1.748|
0002ec  606c              STR      r4,[r5,#4]            ;179  ; OscilRecordCounter
0002ee  f8d132fc          LDR      r3,[r1,#0x2fc]        ;179
0002f2  60ab              STR      r3,[r5,#8]            ;180  ; OscilRemainCounter
0002f4  2301              MOVS     r3,#1                 ;180
0002f6  8213              STRH     r3,[r2,#0x10]         ;180
                  |L1.760|
0002f8  686b              LDR      r3,[r5,#4]            ;184  ; OscilRecordCounter
0002fa  f8d1c000          LDR      r12,[r1,#0]           ;184
0002fe  1c5b              ADDS     r3,r3,#1              ;184
000300  459c              CMP      r12,r3                ;184
000302  bf9c              ITT      LS                    ;184
000304  f04f0c02          MOVLS    r12,#2                ;184
000308  f8a2c010          STRHLS   r12,[r2,#0x10]        ;184
00030c  f8d1c000          LDR      r12,[r1,#0]           ;185
000310  459c              CMP      r12,r3                ;185
000312  d227              BCS      |L1.868|
                  |L1.788|
000314  890b              LDRH     r3,[r1,#8]            ;189
000316  b32b              CBZ      r3,|L1.868|
000318  f2400c00          MOVW     r12,#:LOWER16: Metro
00031c  f2c00c00          MOVT     r12,#:UPPER16: Metro
000320  f8bc721a          LDRH     r7,[r12,#0x21a]       ;191  ; Metro
000324  b9f7              CBNZ     r7,|L1.868|
000326  1e5b              SUBS     r3,r3,#1              ;191
000328  810b              STRH     r3,[r1,#8]            ;193
00032a  f641773f          MOV      r7,#0x1f3f            ;193
00032e  f8dc3004          LDR      r3,[r12,#4]           ;193  ; Metro
000332  f2c007ff          MOVT     r7,#0xff              ;193
000336  401f              ANDS     r7,r7,r3              ;193
000338  eb0103c0          ADD      r3,r1,r0,LSL #3       ;193
00033c  f8c37110          STR      r7,[r3,#0x110]        ;193
000340  f8dcc008          LDR      r12,[r12,#8]          ;193  ; Metro
000344  f8c3c114          STR      r12,[r3,#0x114]       ;195
000348  2303              MOVS     r3,#3                 ;195
00034a  8213              STRH     r3,[r2,#0x10]         ;195
                  |L1.844|
00034c  68ab              LDR      r3,[r5,#8]            ;199  ; OscilRemainCounter
00034e  b113              CBZ      r3,|L1.854|
000350  1e5b              SUBS     r3,r3,#1              ;199
000352  60ab              STR      r3,[r5,#8]            ;199  ; OscilRemainCounter
000354  d106              BNE      |L1.868|
                  |L1.854|
000356  eb010c80          ADD      r12,r1,r0,LSL #2      ;202
00035a  686b              LDR      r3,[r5,#4]            ;202  ; OscilRecordCounter
00035c  f8cc3090          STR      r3,[r12,#0x90]        ;203
000360  2304              MOVS     r3,#4                 ;203
000362  8213              STRH     r3,[r2,#0x10]         ;203
                  |L1.868|
000364  686b              LDR      r3,[r5,#4]            ;209  ; OscilRecordCounter
000366  1c5a              ADDS     r2,r3,#1              ;209
000368  606a              STR      r2,[r5,#4]            ;209  ; OscilRecordCounter
00036a  88ca              LDRH     r2,[r1,#6]            ;209
00036c  f8d61080          LDR      r1,[r6,#0x80]         ;209  ; WorkOscilConfig
000370  f7fffffe          BL       SaveSample
000374  69a8              LDR      r0,[r5,#0x18]         ;211  ; ptrOscilCmnd
000376  6869              LDR      r1,[r5,#4]            ;211  ; OscilRecordCounter
000378  f8d002f8          LDR      r0,[r0,#0x2f8]        ;211
00037c  4288              CMP      r0,r1                 ;211
00037e  bf98              IT       LS                    ;211
000380  606c              STRLS    r4,[r5,#4]            ;211  ; OscilRecordCounter
000382  bdf0              POP      {r4-r7,pc}
;;;213    
                          ENDP

                  CalcOscilSampleSize PROC
;;;216    */
;;;217    int32_t CalcOscilSampleSize(OscilConfig_type * OscilConfig) {
000384  f04f0c00          MOV      r12,#0
000388  b470              PUSH     {r4-r6}
;;;218      
;;;219    int32_t i, OscilSampleSize, Count64 = 0, Count32 = 0, Count16 = 0;
;;;220      
;;;221      /*Расчет размера памяти под одну выборку */
;;;222      for (i = OscilConfig->OscilChNum - 1; i >= 0 ; i--)
00038a  f9b01086          LDRSH    r1,[r0,#0x86]
00038e  4663              MOV      r3,r12                ;219
000390  4662              MOV      r2,r12                ;219
000392  1e49              SUBS     r1,r1,#1
;;;223      {
;;;224        if ((OscilConfig->OscilTypeData[i] & 0x0300) == 0x0100) Count16++;
;;;225        if ((OscilConfig->OscilTypeData[i] & 0x0300) == 0x0200) Count32++;
;;;226        if ((OscilConfig->OscilTypeData[i] & 0x0300) == 0x0300) Count64++;
000394  bf58              IT       PL
000396  f44f7640          MOVPL    r6,#0x300
00039a  d412              BMI      |L1.962|
                  |L1.924|
00039c  f8305011          LDRH     r5,[r0,r1,LSL #1]     ;224
0003a0  f4057440          AND      r4,r5,#0x300          ;224
0003a4  f5b47f80          CMP      r4,#0x100             ;224
0003a8  bf08              IT       EQ                    ;224
0003aa  1c52              ADDEQ    r2,r2,#1              ;224
0003ac  f5b47f00          CMP      r4,#0x200             ;225
0003b0  bf08              IT       EQ                    ;225
0003b2  1c5b              ADDEQ    r3,r3,#1              ;225
0003b4  ea360405          BICS     r4,r6,r5
0003b8  bf08              IT       EQ
0003ba  f10c0c01          ADDEQ    r12,r12,#1
0003be  1e49              SUBS     r1,r1,#1
0003c0  d5ec              BPL      |L1.924|
                  |L1.962|
;;;227      }
;;;228      
;;;229      OscilSampleSize = 8*Count64 + 4*Count32 + 2*Count16;
0003c2  ea4f00cc          LSL      r0,r12,#3
0003c6  eb000083          ADD      r0,r0,r3,LSL #2
0003ca  eb000042          ADD      r0,r0,r2,LSL #1
;;;230      if ((Count64 != 0 || Count32 != 0) && (Count16 % 2 != 0)) OscilSampleSize += 2;   
0003ce  ea5c0103          ORRS     r1,r12,r3
0003d2  bf1c              ITT      NE
0003d4  f0120f01          TSTNE    r2,#1
0003d8  1c80              ADDNE    r0,r0,#2
;;;231      
;;;232      return OscilSampleSize;
;;;233    }
0003da  bc70              POP      {r4-r6}
0003dc  4770              BX       lr
;;;234    /* 
                          ENDP

                  CheckOscilConfig PROC
;;;237    */
;;;238    int32_t CheckOscilConfig(OscilConfig_type * OscilConfig) {
0003de  f9b03084          LDRSH    r3,[r0,#0x84]
;;;239    int32_t i;
;;;240      
;;;241      /* Проверяем конфигурацию                       */
;;;242      if ((OscilConfig->OscilQuantity < 1)       || (OscilConfig->OscilQuantity > 32))        {return 1;}
0003e2  1e59              SUBS     r1,r3,#1
0003e4  2920              CMP      r1,#0x20
0003e6  bf24              ITT      CS
0003e8  2001              MOVCS    r0,#1
;;;243      if ((OscilConfig->OscilChNum < 1)          || (OscilConfig->OscilChNum > 32))           {return 2;}
;;;244      if ((OscilConfig->OscilHistoryPercent < 0) || (OscilConfig->OscilHistoryPercent > 100)) {return 3;}
;;;245      
;;;246      /* Проверяем, что у данных 32 и 64 бита адрес четный (кратный слову), нет данных неизвестного размера  */
;;;247      for (i = (OscilConfig->OscilChNum - 1); i >= 0 ; i--)
;;;248      {
;;;249        if ((OscilConfig->OscilTypeData[i] & 0x0200) && (OscilConfig->OscilAddr[i] & 0x0001)) {return 4;}
;;;250        if ((OscilConfig->OscilTypeData[i] & 0x0300) == 0) {return 5;}
;;;251      }
;;;252    
;;;253      /* Проверяем на размерность данных */
;;;254      for (i = (OscilConfig->OscilChNum - 1); i > 0 ; i--)
;;;255      {
;;;256        if ((OscilConfig->OscilTypeData[i] & 0x0300) > (OscilConfig->OscilTypeData[i - 1] & 0x0300)) {return 6;}
;;;257      }
;;;258    
;;;259      /* Проверяем, что размер памяти под осциллограмму кратен 32 слов = 64 байта */
;;;260      if (OscilConfig->OscilSize & 0x0000003F) {return 7;}
;;;261      
;;;262      /* Проверяем, что память на все осциллограммы не превышает доступную  */
;;;263      if ((OscilConfig->OscilSize * OscilConfig->OscilQuantity) > SizeMemory) {return 8;}
;;;264      
;;;265      /* Расcчитываем размер памяти под одну запись  */
;;;266      ptrOscilCmnd->OscilSampleSize = CalcOscilSampleSize(OscilConfig);
;;;267      
;;;268      /* Проыверяем, что память под осцциллограмму содержит целое число записей   */
;;;269      if (OscilConfig->OscilSize % ptrOscilCmnd->OscilSampleSize) {return 9;}
;;;270      
;;;271      /* Длина осциллограммы - количество выборок       */
;;;272      ptrOscilCmnd->OscilLenght = (OscilConfig->OscilSize / ptrOscilCmnd->OscilSampleSize); 					
;;;273      /* Предыстория осциллограммы - количество выборок */
;;;274      ptrOscilCmnd->OscilHistoryCount = ptrOscilCmnd->OscilLenght * OscilConfig->OscilHistoryPercent / 100;		
;;;275      /* Количество выборок полсе записи предыстории    */
;;;276      ptrOscilCmnd->OscilRemainingCount = ptrOscilCmnd->OscilLenght - ptrOscilCmnd->OscilHistoryCount;						 
;;;277      
;;;278      for (i = 0; i < 32; i++) ptrOscilCmnd->OscilStatus[i] = 0;   
;;;279      
;;;280      /* Конфигурация в порядке */
;;;281      return 0;
;;;282    }
0003ea  4770              BXCS     lr
0003ec  b4f0              PUSH     {r4-r7}               ;238
0003ee  f9b04086          LDRSH    r4,[r0,#0x86]         ;243
0003f2  1e61              SUBS     r1,r4,#1              ;243
0003f4  2920              CMP      r1,#0x20              ;243
0003f6  bf22              ITTT     CS                    ;243
0003f8  2002              MOVCS    r0,#2                 ;243
0003fa  bcf0              POPCS    {r4-r7}
0003fc  4770              BXCS     lr
0003fe  f8b01088          LDRH     r1,[r0,#0x88]         ;244
000402  2965              CMP      r1,#0x65              ;244
000404  bf22              ITTT     CS                    ;244
000406  2003              MOVCS    r0,#3                 ;244
000408  bcf0              POPCS    {r4-r7}
00040a  4770              BXCS     lr
00040c  1e61              SUBS     r1,r4,#1              ;247
00040e  d413              BMI      |L1.1080|
                  |L1.1040|
000410  f8302011          LDRH     r2,[r0,r1,LSL #1]     ;249
000414  f4127f00          TST      r2,#0x200             ;249
000418  d009              BEQ      |L1.1070|
00041a  eb000c41          ADD      r12,r0,r1,LSL #1      ;249
00041e  f89cc040          LDRB     r12,[r12,#0x40]       ;249
000422  f01c0f01          TST      r12,#1                ;249
000426  d002              BEQ      |L1.1070|
000428  bcf0              POP      {r4-r7}
00042a  2004              MOVS     r0,#4                 ;249
00042c  4770              BX       lr
                  |L1.1070|
00042e  f4127f40          TST      r2,#0x300             ;250
000432  d013              BEQ      |L1.1116|
000434  1e49              SUBS     r1,r1,#1              ;250
000436  d5eb              BPL      |L1.1040|
                  |L1.1080|
000438  1e61              SUBS     r1,r4,#1              ;254
00043a  2900              CMP      r1,#0                 ;254
00043c  dd14              BLE      |L1.1128|
                  |L1.1086|
00043e  eb000c41          ADD      r12,r0,r1,LSL #1      ;256
000442  f8302011          LDRH     r2,[r0,r1,LSL #1]     ;256
000446  f83ccc02          LDRH     r12,[r12,#-2]         ;256
00044a  f4027240          AND      r2,r2,#0x300          ;256
00044e  f40c7c40          AND      r12,r12,#0x300        ;256
000452  4562              CMP      r2,r12                ;256
000454  d905              BLS      |L1.1122|
000456  bcf0              POP      {r4-r7}
000458  2006              MOVS     r0,#6                 ;256
00045a  4770              BX       lr
                  |L1.1116|
00045c  bcf0              POP      {r4-r7}
00045e  2005              MOVS     r0,#5                 ;250
000460  4770              BX       lr
                  |L1.1122|
000462  1e49              SUBS     r1,r1,#1
000464  2900              CMP      r1,#0                 ;254
000466  dcea              BGT      |L1.1086|
                  |L1.1128|
000468  f8d01080          LDR      r1,[r0,#0x80]         ;260
00046c  f0110f3f          TST      r1,#0x3f              ;260
000470  bf1e              ITTT     NE                    ;260
000472  2007              MOVNE    r0,#7                 ;260
000474  bcf0              POPNE    {r4-r7}
000476  4770              BXNE     lr
000478  4359              MULS     r1,r3,r1              ;263
00047a  f5b12f00          CMP      r1,#0x80000           ;263
00047e  bf82              ITTT     HI                    ;263
000480  2008              MOVHI    r0,#8                 ;263
000482  bcf0              POPHI    {r4-r7}
000484  4770              BXHI     lr
000486  4606              MOV      r6,r0                 ;266
000488  f04f0c00          MOV      r12,#0                ;266
00048c  4663              MOV      r3,r12                ;266
00048e  4662              MOV      r2,r12                ;266
000490  1e61              SUBS     r1,r4,#1              ;266
000492  bf58              IT       PL                    ;266
000494  f44f7740          MOVPL    r7,#0x300             ;266
000498  d412              BMI      |L1.1216|
                  |L1.1178|
00049a  f8364011          LDRH     r4,[r6,r1,LSL #1]     ;266
00049e  f4047540          AND      r5,r4,#0x300          ;266
0004a2  f5b57f80          CMP      r5,#0x100             ;266
0004a6  bf08              IT       EQ                    ;266
0004a8  1c52              ADDEQ    r2,r2,#1              ;266
0004aa  f5b57f00          CMP      r5,#0x200             ;266
0004ae  bf08              IT       EQ                    ;266
0004b0  1c5b              ADDEQ    r3,r3,#1              ;266
0004b2  ea370404          BICS     r4,r7,r4              ;266
0004b6  bf08              IT       EQ                    ;266
0004b8  f10c0c01          ADDEQ    r12,r12,#1            ;266
0004bc  1e49              SUBS     r1,r1,#1              ;266
0004be  d5ec              BPL      |L1.1178|
                  |L1.1216|
0004c0  ea4f01cc          LSL      r1,r12,#3             ;266
0004c4  eb010183          ADD      r1,r1,r3,LSL #2       ;266
0004c8  eb010142          ADD      r1,r1,r2,LSL #1       ;266
0004cc  ea5c0303          ORRS     r3,r12,r3             ;266
0004d0  bf1c              ITT      NE                    ;266
0004d2  f0120f01          TSTNE    r2,#1                 ;266
0004d6  1c89              ADDNE    r1,r1,#2              ;266
0004d8  b28a              UXTH     r2,r1                 ;266
0004da  f2400100          MOVW     r1,#:LOWER16: ||.data||;266
0004de  f2c00100          MOVT     r1,#:UPPER16: ||.data||;266
0004e2  6989              LDR      r1,[r1,#0x18]         ;266  ; ptrOscilCmnd
0004e4  80ca              STRH     r2,[r1,#6]            ;266
0004e6  f8d03080          LDR      r3,[r0,#0x80]         ;269
0004ea  fbb3fcf2          UDIV     r12,r3,r2             ;269
0004ee  fb023c1c          MLS      r12,r2,r12,r3         ;269
0004f2  f1bc0f00          CMP      r12,#0                ;269
0004f6  bf1e              ITTT     NE                    ;269
0004f8  2009              MOVNE    r0,#9                 ;269
0004fa  bcf0              POPNE    {r4-r7}
0004fc  4770              BXNE     lr
0004fe  fbb3f2f2          UDIV     r2,r3,r2              ;272
000502  f8c122f8          STR      r2,[r1,#0x2f8]        ;274
000506  f8b60088          LDRH     r0,[r6,#0x88]         ;274
00050a  f248531f          MOV      r3,#0x851f            ;274
00050e  4350              MULS     r0,r2,r0              ;274
000510  f2c513eb          MOVT     r3,#0x51eb            ;274
000514  fba33000          UMULL    r3,r0,r3,r0           ;274
000518  0940              LSRS     r0,r0,#5              ;274
00051a  6008              STR      r0,[r1,#0]            ;276
00051c  1a10              SUBS     r0,r2,r0              ;276
00051e  f8c102fc          STR      r0,[r1,#0x2fc]        ;278
000522  2000              MOVS     r0,#0                 ;278
000524  4602              MOV      r2,r0                 ;278
                  |L1.1318|
000526  eb010340          ADD      r3,r1,r0,LSL #1       ;278
00052a  1c40              ADDS     r0,r0,#1              ;278
00052c  821a              STRH     r2,[r3,#0x10]         ;278
00052e  2820              CMP      r0,#0x20              ;278
000530  dbf9              BLT      |L1.1318|
000532  bcf0              POP      {r4-r7}
000534  2000              MOVS     r0,#0                 ;281
000536  4770              BX       lr
;;;283    
                          ENDP

                  CopyOscilCfg PROC
;;;284    void CopyOscilCfg(OscilConfig_type *Source, OscilConfig_type *Destination) {
000538  f240227f          MOV      r2,#0x27f
                  |L1.1340|
;;;285    int32_t *s = (int32_t *)Source;
;;;286    int32_t *d = (int32_t *)Destination;
;;;287    int32_t i;
;;;288      for (i = (sizeof(OscilConfig_type) >> 2) - 1; i >= 0; i--)
;;;289      {
;;;290        *d++ = *s++;
00053c  f8503b04          LDR      r3,[r0],#4
000540  f8413b04          STR      r3,[r1],#4
000544  1e52              SUBS     r2,r2,#1
000546  d5f9              BPL      |L1.1340|
;;;291      }
;;;292    }
000548  4770              BX       lr
;;;293    
                          ENDP

                  LoadOscil PROC
;;;351    
;;;352    void LoadOscil(void) {
00054a  f2400200          MOVW     r2,#:LOWER16: ||.data||
;;;353    	int32_t i;
;;;354    	/*Загрузка осциллограммы*/
;;;355    	if(	ptrOscilCmnd->OscilLoad == 1) 
00054e  f2c00200          MOVT     r2,#:UPPER16: ||.data||
000552  6991              LDR      r1,[r2,#0x18]  ; ptrOscilCmnd
000554  8948              LDRH     r0,[r1,#0xa]
000556  2801              CMP      r0,#1
;;;356      {
;;;357    		for (i = 0; i < 32;  i++) 
000558  bf06              ITTE     EQ
00055a  2000              MOVEQ    r0,#0
;;;358        {
;;;359    			ptrOscilCmnd->OscilLoadData[i] = ptrExtMem[ptrOscilCmnd->OscilLoadTemp + i];
00055c  6912              LDREQ    r2,[r2,#0x10]
;;;360    		}
;;;361    		ptrOscilCmnd->OscilLoad = 0;
;;;362    	}
;;;363    }
00055e  4770              BXNE     lr
                  |L1.1376|
000560  68cb              LDR      r3,[r1,#0xc]          ;359
000562  eb010c40          ADD      r12,r1,r0,LSL #1      ;359
000566  4403              ADD      r3,r3,r0              ;359
000568  1c40              ADDS     r0,r0,#1              ;359
00056a  f8323013          LDRH     r3,[r2,r3,LSL #1]     ;359
00056e  f8ac3050          STRH     r3,[r12,#0x50]        ;359
000572  2820              CMP      r0,#0x20              ;357
000574  dbf4              BLT      |L1.1376|
000576  2000              MOVS     r0,#0                 ;361
000578  8148              STRH     r0,[r1,#0xa]          ;361
00057a  4770              BX       lr
;;;364    
                          ENDP

                  WriteOscil PROC
;;;365    void WriteOscil(void){
00057c  b510              PUSH     {r4,lr}
;;;366    static uint16_t OscilFreqDiv = 0;  
;;;367        /*Запись осциллограммы*/
;;;368    	if (OscilFreqDiv == 0)	
00057e  f2400400          MOVW     r4,#:LOWER16: ||.data||
000582  f2c00400          MOVT     r4,#:UPPER16: ||.data||
000586  8860              LDRH     r0,[r4,#2]  ; OscilFreqDiv
000588  b9a8              CBNZ     r0,|L1.1462|
;;;369      {	
;;;370        OscilFreqDiv = WorkOscilConfig.OscilFreqDiv; 
00058a  f2400000          MOVW     r0,#:LOWER16: ||.bss||+512
00058e  f2c00000          MOVT     r0,#:UPPER16: ||.bss||+512
000592  f8b0108a          LDRH     r1,[r0,#0x8a]  ; WorkOscilConfig
000596  8061              STRH     r1,[r4,#2]
;;;371        
;;;372        switch (WorkOscilConfig.OscilEnable)
000598  f8b0008c          LDRH     r0,[r0,#0x8c]  ; WorkOscilConfig
00059c  2805              CMP      r0,#5
00059e  d206              BCS      |L1.1454|
0005a0  e8dff000          TBB      [pc,r0]
0005a4  0c030303          DCB      0x0c,0x03,0x03,0x03
0005a8  0300              DCB      0x03,0x00
;;;373        {
;;;374          case 0x00:	return; 				//Если осциллограмму не нужно писать 
;;;375          case 0x01:									//0x01 - Без записи в память, 0x02 - Запись в память, 0x03, 0х04 - Нужно ли стирать осциллограмму 
;;;376          case 0x02:
;;;377          case 0x03:
;;;378          case 0x04:  {
;;;379                        WriteSample();
0005aa  f7fffffe          BL       WriteSample
                  |L1.1454|
;;;380                      } break; 		
;;;381        }
;;;382    	}
;;;383    	if (OscilFreqDiv) OscilFreqDiv--;
0005ae  8860              LDRH     r0,[r4,#2]  ; OscilFreqDiv
0005b0  2800              CMP      r0,#0
;;;384    }
0005b2  bf08              IT       EQ
0005b4  bd10              POPEQ    {r4,pc}
                  |L1.1462|
0005b6  b280              UXTH     r0,r0                 ;383
0005b8  1e40              SUBS     r0,r0,#1              ;383
0005ba  8060              STRH     r0,[r4,#2]            ;383
0005bc  bd10              POP      {r4,pc}
;;;385    /*
                          ENDP

                  InitOscil PROC
;;;389    */
;;;390    void InitOscil(OscilConfig_type *SavedOscilConfig, OscilCmnd_type *OscilCmnd, uint16_t *DataBlock, uint16_t *Memory) {
0005be  b510              PUSH     {r4,lr}
0005c0  4604              MOV      r4,r0
;;;391      
;;;392        ptrSavedOscilConfig = SavedOscilConfig; 	
0005c2  f2400000          MOVW     r0,#:LOWER16: ||.data||
0005c6  f2c00000          MOVT     r0,#:UPPER16: ||.data||
0005ca  e9c04105          STRD     r4,r1,[r0,#0x14]
0005ce  e9c02303          STRD     r2,r3,[r0,#0xc]
;;;393    		ptrOscilCmnd = OscilCmnd;
;;;394        ptrDataBlock = DataBlock; 
;;;395    		ptrExtMem = Memory;
;;;396      
;;;397        /* */
;;;398      
;;;399    		ptrOscilCmnd->OscilMemorySize = SizeMemory;								//Вся доступная память под осциллограммы в байтах
0005d2  f44f2000          MOV      r0,#0x80000
;;;400    		ptrOscilCmnd->OscilSampleRate = SampleRate;							  //Частота выборки без делителя   
0005d6  f8c102f0          STR      r0,[r1,#0x2f0]
0005da  f44f507a          MOV      r0,#0x3e80
0005de  8088              STRH     r0,[r1,#4]
;;;401      
;;;402        /* Копируем сохраненную конфигурацию в рабочую */
;;;403        CopyOscilCfg(SavedOscilConfig, &WorkOscilConfig);
0005e0  4621              MOV      r1,r4
0005e2  f2400200          MOVW     r2,#:LOWER16: ||.bss||+512
0005e6  f2c00200          MOVT     r2,#:UPPER16: ||.bss||+512
0005ea  f240237f          MOV      r3,#0x27f
                  |L1.1518|
0005ee  f8510b04          LDR      r0,[r1],#4
0005f2  f8420b04          STR      r0,[r2],#4
0005f6  1e5b              SUBS     r3,r3,#1
0005f8  d5f9              BPL      |L1.1518|
;;;404      
;;;405        /* Проверяем рабочую конфигурацию осциллографа  */
;;;406        if (CheckOscilConfig(&WorkOscilConfig)) 
0005fa  f2400000          MOVW     r0,#:LOWER16: ||.bss||+512
0005fe  f2c00000          MOVT     r0,#:UPPER16: ||.bss||+512
000602  f7fffffe          BL       CheckOscilConfig
000606  2800              CMP      r0,#0
;;;407        {
;;;408          /* Если ошибка в конфигурации, то отключаем осциллограф */
;;;409          WorkOscilConfig.OscilEnable = SavedOscilConfig->OscilEnable = 0;
;;;410        }
;;;411    }
000608  bf08              IT       EQ
00060a  bd10              POPEQ    {r4,pc}
00060c  2000              MOVS     r0,#0                 ;409
00060e  f8a4008c          STRH     r0,[r4,#0x8c]         ;409
000612  f2400100          MOVW     r1,#:LOWER16: ||.bss||+512;409
000616  f2c00100          MOVT     r1,#:UPPER16: ||.bss||+512;409
00061a  f8a1008c          STRH     r0,[r1,#0x8c]         ;409
00061e  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  Oscil PROC
;;;413    
;;;414    void Oscil( void ){
000620  b570              PUSH     {r4-r6,lr}
000622  f2400400          MOVW     r4,#:LOWER16: ||.data||
000626  f2c00400          MOVT     r4,#:UPPER16: ||.data||
00062a  69a1              LDR      r1,[r4,#0x18]  ; ptrOscilCmnd
00062c  2500              MOVS     r5,#0
00062e  f8b10290          LDRH     r0,[r1,#0x290]
000632  2801              CMP      r0,#1
000634  bf04              ITT      EQ
000636  f8b102d4          LDRHEQ   r0,[r1,#0x2d4]
00063a  2801              CMPEQ    r0,#1
00063c  d151              BNE      |L1.1762|
00063e  f8a152d4          STRH     r5,[r1,#0x2d4]
000642  f8a15290          STRH     r5,[r1,#0x290]
000646  f8b10292          LDRH     r0,[r1,#0x292]
00064a  2800              CMP      r0,#0
00064c  bf08              IT       EQ
00064e  8025              STRHEQ   r5,[r4,#0]
000650  f9b42000          LDRSH    r2,[r4,#0]  ; OscilCfgLoadCount
000654  4290              CMP      r0,r2
000656  bf02              ITTT     EQ
000658  2000              MOVEQ    r0,#0
00065a  f2400300          MOVWEQ   r3,#:LOWER16: ||.bss||+3072
00065e  f2c00300          MOVTEQ   r3,#:UPPER16: ||.bss||+3072
000662  d13e              BNE      |L1.1762|
                  |L1.1636|
000664  eb010c40          ADD      r12,r1,r0,LSL #1
000668  eb001642          ADD      r6,r0,r2,LSL #5
00066c  f8bcc294          LDRH     r12,[r12,#0x294]
000670  1c40              ADDS     r0,r0,#1
000672  f823c016          STRH     r12,[r3,r6,LSL #1]
000676  2820              CMP      r0,#0x20
000678  dbf4              BLT      |L1.1636|
00067a  1c50              ADDS     r0,r2,#1
00067c  b200              SXTH     r0,r0
00067e  8020              STRH     r0,[r4,#0]
000680  2828              CMP      r0,#0x28
000682  d12e              BNE      |L1.1762|
000684  8025              STRH     r5,[r4,#0]
000686  f2400000          MOVW     r0,#:LOWER16: ||.bss||+3072
00068a  f2c00000          MOVT     r0,#:UPPER16: ||.bss||+3072
00068e  f7fffffe          BL       CheckOscilConfig
000692  b120              CBZ      r0,|L1.1694|
000694  69a1              LDR      r1,[r4,#0x18]  ; ptrOscilCmnd
000696  2002              MOVS     r0,#2
000698  f8a102f4          STRH     r0,[r1,#0x2f4]
00069c  e021              B        |L1.1762|
                  |L1.1694|
00069e  69a0              LDR      r0,[r4,#0x18]  ; ptrOscilCmnd
0006a0  2301              MOVS     r3,#1
0006a2  f8a032f4          STRH     r3,[r0,#0x2f4]
0006a6  f2400100          MOVW     r1,#:LOWER16: ||.bss||+3072
0006aa  f2c00100          MOVT     r1,#:UPPER16: ||.bss||+3072
0006ae  f5a16020          SUB      r0,r1,#0xa00
0006b2  f240227f          MOV      r2,#0x27f
                  |L1.1718|
0006b6  f851cb04          LDR      r12,[r1],#4
0006ba  f840cb04          STR      r12,[r0],#4
0006be  1e52              SUBS     r2,r2,#1
0006c0  d5f9              BPL      |L1.1718|
0006c2  f2400100          MOVW     r1,#:LOWER16: ||.bss||+3072
0006c6  f2c00100          MOVT     r1,#:UPPER16: ||.bss||+3072
0006ca  6960              LDR      r0,[r4,#0x14]  ; ptrSavedOscilConfig
0006cc  f240227f          MOV      r2,#0x27f
                  |L1.1744|
0006d0  f851cb04          LDR      r12,[r1],#4
0006d4  f840cb04          STR      r12,[r0],#4
0006d8  1e52              SUBS     r2,r2,#1
0006da  d5f9              BPL      |L1.1744|
0006dc  69a0              LDR      r0,[r4,#0x18]  ; ptrOscilCmnd
0006de  f8a032f4          STRH     r3,[r0,#0x2f4]
                  |L1.1762|
0006e2  69a1              LDR      r1,[r4,#0x18]  ; ptrOscilCmnd
0006e4  8948              LDRH     r0,[r1,#0xa]
0006e6  2801              CMP      r0,#1
0006e8  bf04              ITT      EQ
0006ea  2000              MOVEQ    r0,#0
0006ec  6922              LDREQ    r2,[r4,#0x10]
0006ee  d10b              BNE      |L1.1800|
                  |L1.1776|
0006f0  68cb              LDR      r3,[r1,#0xc]
0006f2  eb010c40          ADD      r12,r1,r0,LSL #1
0006f6  4403              ADD      r3,r3,r0
0006f8  1c40              ADDS     r0,r0,#1
0006fa  f8323013          LDRH     r3,[r2,r3,LSL #1]
0006fe  f8ac3050          STRH     r3,[r12,#0x50]
000702  2820              CMP      r0,#0x20
000704  dbf4              BLT      |L1.1776|
000706  814d              STRH     r5,[r1,#0xa]
                  |L1.1800|
000708  8860              LDRH     r0,[r4,#2]  ; OscilFreqDiv
00070a  b9a8              CBNZ     r0,|L1.1848|
00070c  f2400000          MOVW     r0,#:LOWER16: ||.bss||+512
000710  f2c00000          MOVT     r0,#:UPPER16: ||.bss||+512
000714  f8b0108a          LDRH     r1,[r0,#0x8a]  ; WorkOscilConfig
000718  8061              STRH     r1,[r4,#2]
00071a  f8b0008c          LDRH     r0,[r0,#0x8c]  ; WorkOscilConfig
00071e  2805              CMP      r0,#5
000720  d206              BCS      |L1.1840|
000722  e8dff000          TBB      [pc,r0]
000726  0c03              DCB      0x0c,0x03
000728  03030300          DCB      0x03,0x03,0x03,0x00
00072c  f7fffffe          BL       WriteSample
                  |L1.1840|
000730  8860              LDRH     r0,[r4,#2]  ; OscilFreqDiv
000732  2800              CMP      r0,#0
;;;415    #if (ExtMem_Present == YES)	
;;;416    	
;;;417    	ReadNewConfigOscil();
;;;418    	
;;;419    	LoadOscil();
;;;420        
;;;421      WriteOscil();
;;;422    #endif
;;;423    }
000734  bf08              IT       EQ
000736  bd70              POPEQ    {r4-r6,pc}
                  |L1.1848|
000738  b280              UXTH     r0,r0
00073a  1e40              SUBS     r0,r0,#1
00073c  8060              STRH     r0,[r4,#2]
00073e  bd70              POP      {r4-r6,pc}
;;;424     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BufferSaveToMemory
                          %        512
                  WorkOscilConfig
                          %        2560
                  NewOscilConfig
                          %        2560

                          AREA ||.data||, DATA, ALIGN=2

                  OscilCfgLoadCount
000000  0000              DCW      0x0000
                  OscilFreqDiv
000002  0000              DCW      0x0000
                  OscilRecordCounter
                          DCD      0x00000000
                  OscilRemainCounter
                          DCD      0x00000000
                  ptrDataBlock
                          DCD      0x00000000
                  ptrExtMem
                          DCD      0x00000000
                  ptrSavedOscilConfig
                          DCD      0x00000000
                  ptrOscilCmnd
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "PERIPH\\Oscil.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_Oscil_c_SavePart____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___7_Oscil_c_SavePart____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_Oscil_c_SavePart____REVSH|
#line 144
|__asm___7_Oscil_c_SavePart____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
