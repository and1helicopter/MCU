; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\fram.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\fram.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\fram.crf PERIPH\fram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  InitFram PROC
;;;7      
;;;8      void InitFram(void) {
000000  f6430044          MOV      r0,#0x3844
;;;9      	
;;;10     	if (FramSPI == SPI4) {																								
;;;11     		if (RCC->APB2ENR & RCC_APB2ENR_SPI4EN) return;											/* Уже инициализировано	*/
000004  f2c40002          MOVT     r0,#0x4002
000008  6801              LDR      r1,[r0,#0]
00000a  f4115f00          TST      r1,#0x2000
;;;12     		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;																	/* Clock enable fo SPI 4*/
;;;13     	} else return;
;;;14     	
;;;15     	FramCS = 1;
;;;16     	FramSPI->CR1 = 	SPI_CR1_SPE |				/*SPI Enable								*/
;;;17     									SPI_CR1_SSM | 			/*Software slave management	*/
;;;18     									SPI_CR1_SSI | 			/*Internal slave select			*/	
;;;19     									SPI_CR1_MSTR| 			/*Master selection					*/
;;;20     									(1ul << 3);					/*Clock / 4 = 21MHz					*/
;;;21     	
;;;22     	/* SPI4_Tx & Rx	DMA Configuration	---------------------------------------------------------------	*/
;;;23     	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN | RCC_AHB1ENR_CRCEN;			/* DMA2 & CRC Clock enable						*/
;;;24     	DMA2->LIFCR				 	= (0x3Dul << 6) | (0x3Dul << 0);				/* Clear DMA interrupr status bits		*/
;;;25     	/* SPI4_Tx DMA	*/
;;;26     	DMA2_Stream1->PAR 	= (unsigned int)&(FramSPI->DR);
;;;27     	DMA2_Stream1->CR	 	= (4ul << 25) 	|												/* Channel #4													*/
;;;28     												(1ul<< 6)			|												/* Data transfer direction M-to-P			*/
;;;29     												DMA_SxCR_MINC	|												/* Memory increment mode							*/
;;;30     //											DMA_SxCR_TCIE	|												/* Transmit complete interrupe				*/
;;;31     //											DMA_SxCR_EN		|												/* Channel enable											*/
;;;32     												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/
;;;33     	/* SPI4_Rx DMA	*/
;;;34     	DMA2_Stream0->PAR 	= (unsigned int)&(FramSPI->DR);
;;;35     	DMA2_Stream0->CR	 	= (4ul << 25) 	|												/* Channel #4													*/
;;;36     												(0ul<< 6)			|												/* Data transfer direction P-to-M			*/
;;;37     												DMA_SxCR_MINC	|												/* Memory increment mode							*/
;;;38     //											DMA_SxCR_TCIE	|												/* Transmit complete interrupe				*/
;;;39     //											DMA_SxCR_EN		|												/* Channel enable											*/
;;;40     												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/
;;;41     	
;;;42     	NVIC_SetPriority(DMA2_Stream1_IRQn, DMA2_Stream1_Prty);
;;;43     	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
;;;44     
;;;45     	NVIC_SetPriority(DMA2_Stream0_IRQn, DMA2_Stream0_Prty);
;;;46     	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
;;;47     
;;;48     }
00000e  bf18              IT       NE
000010  4770              BXNE     lr
000012  6801              LDR      r1,[r0,#0]            ;12
000014  f4415100          ORR      r1,r1,#0x2000         ;12
000018  6001              STR      r1,[r0,#0]            ;12
00001a  2001              MOVS     r0,#1                 ;15
00001c  2100              MOVS     r1,#0                 ;15
00001e  f2c42142          MOVT     r1,#0x4242            ;15
000022  f8c10290          STR      r0,[r1,#0x290]        ;15
000026  f44f5150          MOV      r1,#0x3400            ;16
00002a  f2c40101          MOVT     r1,#0x4001            ;16
00002e  f44f7053          MOV      r0,#0x34c             ;16
000032  8008              STRH     r0,[r1,#0]            ;16
000034  f6430030          MOV      r0,#0x3830            ;23
000038  f2c40002          MOVT     r0,#0x4002            ;23
00003c  6801              LDR      r1,[r0,#0]            ;23
00003e  f4415180          ORR      r1,r1,#0x1000         ;23
000042  f4410180          ORR      r1,r1,#0x400000       ;23
000046  6001              STR      r1,[r0,#0]            ;23
000048  f2464108          MOV      r1,#0x6408            ;24
00004c  f2c40102          MOVT     r1,#0x4002            ;24
000050  f640707d          MOV      r0,#0xf7d             ;24
000054  6008              STR      r0,[r1,#0]            ;24
000056  f2464130          MOV      r1,#0x6430            ;26
00005a  f243400c          MOV      r0,#0x340c            ;26
00005e  f2c40102          MOVT     r1,#0x4002            ;26
000062  f2c40001          MOVT     r0,#0x4001            ;26
000066  6008              STR      r0,[r1,#0]            ;26
000068  f2464228          MOV      r2,#0x6428            ;27
00006c  f44f6188          MOV      r1,#0x440             ;27
000070  f2c40202          MOVT     r2,#0x4002            ;27
000074  f6c00103          MOVT     r1,#0x803             ;27
000078  6011              STR      r1,[r2,#0]            ;27
00007a  f2464118          MOV      r1,#0x6418            ;34
00007e  f2c40102          MOVT     r1,#0x4002            ;34
000082  6008              STR      r0,[r1,#0]            ;34
000084  f2464110          MOV      r1,#0x6410            ;35
000088  f44f6080          MOV      r0,#0x400             ;35
00008c  f2c40102          MOVT     r1,#0x4002            ;35
000090  f6c00003          MOVT     r0,#0x803             ;35
000094  6008              STR      r0,[r1,#0]            ;35
000096  f24e0139          MOV      r1,#0xe039            ;35
00009a  f2ce0100          MOVT     r1,#0xe000            ;35
00009e  20f0              MOVS     r0,#0xf0              ;35
0000a0  f8810400          STRB     r0,[r1,#0x400]        ;35
0000a4  f24e0004          MOV      r0,#0xe004            ;35
0000a8  f2ce0000          MOVT     r0,#0xe000            ;35
0000ac  f04f7100          MOV      r1,#0x2000000         ;35
0000b0  f8c01100          STR      r1,[r0,#0x100]        ;35
0000b4  f24e0238          MOV      r2,#0xe038            ;35
0000b8  f2ce0200          MOVT     r2,#0xe000            ;35
0000bc  2110              MOVS     r1,#0x10              ;35
0000be  f8821400          STRB     r1,[r2,#0x400]        ;35
0000c2  0581              LSLS     r1,r0,#22             ;35
0000c4  f8c01100          STR      r1,[r0,#0x100]        ;35
0000c8  4770              BX       lr
;;;49     
                          ENDP

                  FramWrite PROC
;;;50     int FramWrite(unsigned int *IntAddr, unsigned int ExtAddr, unsigned short Count) {
0000ca  2a00              CMP      r2,#0
;;;51     int Temp;
;;;52     	
;;;53     	if (Count  == 0) return 1;
0000cc  bf04              ITT      EQ
0000ce  2001              MOVEQ    r0,#1
;;;54     	if (FramCS == 0) return 0;
;;;55     
;;;56     	/* Отключаем передачу DMA, включаем передачу 8 bit	*/
;;;57     	FramSPI->CR1 &= ~SPI_CR1_DFF;
;;;58     	FramSPI->CR2	=	0;
;;;59     	
;;;60     	/* Fram chip select в низкий уровень и отправляем WREN opcode -------------------	*/
;;;61     	FramCS = 0;
;;;62     	FramSPI->DR = 0x06;														/* WREN opcode -------------------- */						
;;;63     	while (!(FramSPI->SR & SPI_SR_TXE));					/* Ждем начала передачи байта				*/
;;;64     	while (FramSPI->SR & SPI_SR_BSY);							/* Ожидаем окончания передачи байта	*/
;;;65     	FramCS = 1;
;;;66     
;;;67     	Temp = FramSPI->DR;														/* Считываем принятый байт					*/
;;;68     	__nop();
;;;69     	
;;;70     	/* Fram chip select в низкий уровень и отправляем WRITE opcode ------------------	*/
;;;71     	FramCS = 0;
;;;72     	FramSPI->DR = 0x02;														/* WRITE opcode ------------------- */						
;;;73     	
;;;74     	/* SPI4_Tx DMA Configuration	------------------------------------------------------------------- */
;;;75     	DMA2_Stream1->M0AR 	= (unsigned int)IntAddr;
;;;76     	DMA2_Stream1->NDTR 	= Count >> 1;														/* Записывать будем по 16 слов				*/
;;;77     	DMA2_Stream1->CR	 	= (4ul << 25) 			|										/* Channel #4													*/
;;;78     												(1ul<< 6)					|										/* Data transfer direction M-to-P			*/
;;;79     												DMA_SxCR_MSIZE_16	|
;;;80     												DMA_SxCR_PSIZE_16	|
;;;81     												DMA_SxCR_MINC			|										/* Memory increment mode							*/
;;;82     //											DMA_SxCR_TCIE			|										/* Transmit complete interrupt enable	*/
;;;83     //											DMA_SxCR_EN				|										/* Channel enable											*/
;;;84     												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/
;;;85     												
;;;86     	/* SPI4_Rx DMA Configuration	------------------------------------------------------------------- */
;;;87     	DMA2_Stream0->M0AR 	= (unsigned int)&SPI_Tresh;
;;;88     	DMA2_Stream0->NDTR 	= (Count >> 1) + 1;											/* Записывать будем по 16 bit					*/
;;;89     	DMA2_Stream0->CR	 	= (4ul << 25) 			|										/* Channel #4													*/
;;;90     												(0ul<< 6)					|										/* Data transfer direction P-to-M			*/
;;;91     												DMA_SxCR_MSIZE_16	|
;;;92     												DMA_SxCR_PSIZE_16	|
;;;93     //											DMA_SxCR_MINC			|										/* Memory increment mode							*/
;;;94     												DMA_SxCR_TCIE			|										/* Transmit complete interrupt enable	*/
;;;95     //											DMA_SxCR_EN				|										/* Channel enable											*/
;;;96     												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/												
;;;97     
;;;98     	while (FramSPI->SR & SPI_SR_BSY);														/* Ожидаем окончания передачи байта		*/
;;;99     
;;;100    	Temp	= FramSPI->DR;
;;;101    	
;;;102    	DMA2->LIFCR		= (0x3Dul << 0) | (0x3Dul << 6);							/* Clear DMA interrupr status bits		*/
;;;103    	FramSPI->CR1 |= SPI_CR1_DFF;
;;;104    
;;;105    	FramSPI->CR2	= SPI_CR2_RXDMAEN;
;;;106    	PeriphBB(DMA2_Stream0->CR, DMA_SxCR_EN_bit) = 1;
;;;107    
;;;108    	FramSPI->DR		= ExtAddr;
;;;109    
;;;110    	FramSPI->CR2	= SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
;;;111    	PeriphBB(DMA2_Stream1->CR, DMA_SxCR_EN_bit) = 1;
;;;112    	
;;;113    	return 1;
;;;114    }	
0000d0  4770              BXEQ     lr
0000d2  e92d03f0          PUSH     {r4-r9}               ;50
0000d6  2600              MOVS     r6,#0                 ;54
0000d8  f2c42642          MOVT     r6,#0x4242            ;54
0000dc  f8d63290          LDR      r3,[r6,#0x290]        ;54
0000e0  2b00              CMP      r3,#0                 ;54
0000e2  bf02              ITTT     EQ                    ;54
0000e4  2000              MOVEQ    r0,#0                 ;54
0000e6  e8bd03f0          POPEQ    {r4-r9}
0000ea  4770              BXEQ     lr
0000ec  f44f5550          MOV      r5,#0x3400            ;57
0000f0  f2c40501          MOVT     r5,#0x4001            ;57
0000f4  882b              LDRH     r3,[r5,#0]            ;57
0000f6  f4236300          BIC      r3,r3,#0x800          ;57
0000fa  802b              STRH     r3,[r5,#0]            ;57
0000fc  1d2f              ADDS     r7,r5,#4              ;58
0000fe  f04f0800          MOV      r8,#0                 ;58
000102  f8a78000          STRH     r8,[r7,#0]            ;58
000106  f8c68290          STR      r8,[r6,#0x290]        ;61
00010a  f243440c          MOV      r4,#0x340c            ;62
00010e  f2c40401          MOVT     r4,#0x4001            ;62
000112  2306              MOVS     r3,#6                 ;62
000114  8023              STRH     r3,[r4,#0]            ;62
000116  1f23              SUBS     r3,r4,#4              ;63
                  |L1.280|
000118  f8b3c000          LDRH     r12,[r3,#0]           ;63
00011c  f01c0f02          TST      r12,#2                ;63
000120  d0fa              BEQ      |L1.280|
                  |L1.290|
000122  f8b3c000          LDRH     r12,[r3,#0]           ;64
000126  f01c0f80          TST      r12,#0x80             ;64
00012a  d1fa              BNE      |L1.290|
00012c  f04f0c01          MOV      r12,#1                ;65
000130  f8c6c290          STR      r12,[r6,#0x290]       ;65
000134  f8b49000          LDRH     r9,[r4,#0]            ;67
000138  bf00              NOP                            ;68
00013a  f8c68290          STR      r8,[r6,#0x290]        ;71
00013e  2602              MOVS     r6,#2                 ;72
000140  8026              STRH     r6,[r4,#0]            ;72
000142  f2464634          MOV      r6,#0x6434            ;75
000146  f2c40602          MOVT     r6,#0x4002            ;75
00014a  6030              STR      r0,[r6,#0]            ;75
00014c  f246462c          MOV      r6,#0x642c            ;76
000150  f2c40602          MOVT     r6,#0x4002            ;76
000154  0850              LSRS     r0,r2,#1              ;76
000156  6030              STR      r0,[r6,#0]            ;76
000158  f44f5031          MOV      r0,#0x2c40            ;77
00015c  1f36              SUBS     r6,r6,#4              ;77
00015e  f6c00003          MOVT     r0,#0x803             ;77
000162  6030              STR      r0,[r6,#0]            ;77
000164  f2400000          MOVW     r0,#:LOWER16: ||.data||;87
000168  f2c00000          MOVT     r0,#:UPPER16: ||.data||;87
00016c  f246461c          MOV      r6,#0x641c            ;87
000170  f2c40602          MOVT     r6,#0x4002            ;87
000174  6030              STR      r0,[r6,#0]            ;87
000176  eb0c0052          ADD      r0,r12,r2,LSR #1      ;88
00017a  f2464214          MOV      r2,#0x6414            ;88
00017e  f2c40202          MOVT     r2,#0x4002            ;88
000182  6010              STR      r0,[r2,#0]            ;88
000184  f6420010          MOV      r0,#0x2810            ;89
000188  1f12              SUBS     r2,r2,#4              ;89
00018a  f6c00003          MOVT     r0,#0x803             ;89
00018e  6010              STR      r0,[r2,#0]            ;89
                  |L1.400|
000190  8818              LDRH     r0,[r3,#0]            ;98
000192  f0100f80          TST      r0,#0x80              ;98
000196  d1fb              BNE      |L1.400|
000198  8820              LDRH     r0,[r4,#0]            ;100
00019a  f2464208          MOV      r2,#0x6408            ;102
00019e  f2c40202          MOVT     r2,#0x4002            ;102
0001a2  f640707d          MOV      r0,#0xf7d             ;102
0001a6  6010              STR      r0,[r2,#0]            ;102
0001a8  8828              LDRH     r0,[r5,#0]            ;103
0001aa  f4406000          ORR      r0,r0,#0x800          ;103
0001ae  8028              STRH     r0,[r5,#0]            ;103
0001b0  f8a7c000          STRH     r12,[r7,#0]           ;105
0001b4  f44f4000          MOV      r0,#0x8000            ;106
0001b8  f2c4204c          MOVT     r0,#0x424c            ;106
0001bc  f8c0c200          STR      r12,[r0,#0x200]       ;106
0001c0  8021              STRH     r1,[r4,#0]            ;108
0001c2  2003              MOVS     r0,#3                 ;110
0001c4  8038              STRH     r0,[r7,#0]            ;110
0001c6  f44f4005          MOV      r0,#0x8500            ;111
0001ca  f2c4204c          MOVT     r0,#0x424c            ;111
0001ce  f8c0c000          STR      r12,[r0,#0]           ;111
0001d2  e8bd03f0          POP      {r4-r9}
0001d6  2001              MOVS     r0,#1                 ;113
0001d8  4770              BX       lr
;;;115    
                          ENDP

                  FramRead PROC
;;;116    int FramRead(unsigned int *IntAddr, unsigned short ExtAddr, unsigned short Count) {
0001da  2a00              CMP      r2,#0
;;;117    int Temp;
;;;118    	if (Count  == 0) return 1;
0001dc  bf04              ITT      EQ
0001de  2001              MOVEQ    r0,#1
;;;119    	if (FramCS == 0) return 0;
;;;120    
;;;121    	/* Отключаем передачу DMA, включаем передачу 8 bit	*/
;;;122    	FramSPI->CR1 &= ~SPI_CR1_DFF;
;;;123    	FramSPI->CR2	=	0;
;;;124    	
;;;125    	/* Fram chip select в низкий уровень и отправляем READ opcode -------------------	*/
;;;126    	FramCS = 0;
;;;127    	FramSPI->DR = 0x03;														/* READ opcode -------------------- */						
;;;128    	
;;;129    	/* SPI4_Tx DMA Configuration	------------------------------------------------------------------- */
;;;130    	DMA2_Stream1->M0AR 	= (unsigned int)&SPI_Tresh;							
;;;131    	DMA2_Stream1->NDTR 	= Count >> 1;														/* Записывать будем по 16 слов				*/
;;;132    	DMA2_Stream1->CR	 	= (4ul << 25) 			|										/* Channel #4													*/
;;;133    												(1ul<< 6)					|										/* Data transfer direction M-to-P			*/
;;;134    												DMA_SxCR_MSIZE_16	|
;;;135    												DMA_SxCR_PSIZE_16	|
;;;136    //											DMA_SxCR_MINC			|										/* Memory increment mode							*/
;;;137    //											DMA_SxCR_TCIE			|										/* Transmit complete interrupt enable	*/
;;;138    //											DMA_SxCR_EN				|										/* Channel enable											*/
;;;139    												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/
;;;140    												
;;;141    	/* SPI4_Rx DMA Configuration	------------------------------------------------------------------- */
;;;142    	DMA2_Stream0->M0AR 	= (unsigned int)IntAddr;
;;;143    	DMA2_Stream0->NDTR 	= (Count >> 1);													/* Записывать будем по 16 bit					*/
;;;144    	DMA2_Stream0->CR	 	= (4ul << 25) 			|										/* Channel #4													*/
;;;145    												(0ul<< 6)					|										/* Data transfer direction P-to-M			*/
;;;146    												DMA_SxCR_MSIZE_16	|
;;;147    												DMA_SxCR_PSIZE_16	|
;;;148    												DMA_SxCR_MINC			|										/* Memory increment mode							*/
;;;149    												DMA_SxCR_TCIE			|										/* Transmit complete interrupt enable	*/
;;;150    //											DMA_SxCR_EN				|										/* Channel enable											*/
;;;151    												DMA_SxCR_PL_VeryHI;										/* Priority level - very high					*/												
;;;152    
;;;153    	while (FramSPI->SR & SPI_SR_BSY);														/* Ожидаем окончания передачи байта		*/	
;;;154    	Temp	= FramSPI->DR;																				/* Считываем принятые байты						*/
;;;155    
;;;156    	FramSPI->CR1 |= SPI_CR1_DFF;																/* Включаем 16 bit										*/
;;;157    	FramSPI->DR		= ExtAddr;																		/* Отправляем адрес										*/
;;;158    	while (!(FramSPI->SR & SPI_SR_TXE));												/* Ждем начала передачи байта					*/
;;;159    	while (!(FramSPI->SR & SPI_SR_RXNE));												/* Ждем принятого байта								*/
;;;160    	Temp	= FramSPI->DR;																				/* Считываем принятые байты						*/
;;;161    
;;;162    	DMA2->LIFCR		= (0x3Dul << 0) | (0x3Dul << 6);							/* Clear DMA interrupr status bits		*/
;;;163    	PeriphBB(DMA2_Stream0->CR, DMA_SxCR_EN_bit) = 1;
;;;164    	PeriphBB(DMA2_Stream1->CR, DMA_SxCR_EN_bit) = 1;	
;;;165    	FramSPI->CR2	= SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
;;;166    	
;;;167    	return 1;
;;;168    }	
0001e0  4770              BXEQ     lr
0001e2  2300              MOVS     r3,#0                 ;119
0001e4  f2c42342          MOVT     r3,#0x4242            ;119
0001e8  f8d3c290          LDR      r12,[r3,#0x290]       ;119
0001ec  f1bc0f00          CMP      r12,#0                ;119
0001f0  bf04              ITT      EQ                    ;119
0001f2  2000              MOVEQ    r0,#0                 ;119
0001f4  4770              BXEQ     lr
0001f6  b4f0              PUSH     {r4-r7}               ;116
0001f8  f44f5550          MOV      r5,#0x3400            ;122
0001fc  f2c40501          MOVT     r5,#0x4001            ;122
000200  f8b5c000          LDRH     r12,[r5,#0]           ;122
000204  f42c6c00          BIC      r12,r12,#0x800        ;122
000208  f8a5c000          STRH     r12,[r5,#0]           ;122
00020c  f1050c04          ADD      r12,r5,#4             ;123
000210  2400              MOVS     r4,#0                 ;123
000212  f8ac4000          STRH     r4,[r12,#0]           ;123
000216  f8c34290          STR      r4,[r3,#0x290]        ;126
00021a  f243430c          MOV      r3,#0x340c            ;127
00021e  f2c40301          MOVT     r3,#0x4001            ;127
000222  2403              MOVS     r4,#3                 ;127
000224  801c              STRH     r4,[r3,#0]            ;127
000226  f2400600          MOVW     r6,#:LOWER16: ||.data||;130
00022a  f2c00600          MOVT     r6,#:UPPER16: ||.data||;130
00022e  f2464734          MOV      r7,#0x6434            ;130
000232  f2c40702          MOVT     r7,#0x4002            ;130
000236  603e              STR      r6,[r7,#0]            ;130
000238  f246462c          MOV      r6,#0x642c            ;131
00023c  f2c40602          MOVT     r6,#0x4002            ;131
000240  0852              LSRS     r2,r2,#1              ;131
000242  6032              STR      r2,[r6,#0]            ;131
000244  f2464728          MOV      r7,#0x6428            ;132
000248  f44f5621          MOV      r6,#0x2840            ;132
00024c  f2c40702          MOVT     r7,#0x4002            ;132
000250  f6c00603          MOVT     r6,#0x803             ;132
000254  603e              STR      r6,[r7,#0]            ;132
000256  f246461c          MOV      r6,#0x641c            ;142
00025a  f2c40602          MOVT     r6,#0x4002            ;142
00025e  6030              STR      r0,[r6,#0]            ;142
000260  f2464014          MOV      r0,#0x6414            ;143
000264  f2c40002          MOVT     r0,#0x4002            ;143
000268  6002              STR      r2,[r0,#0]            ;143
00026a  f2464210          MOV      r2,#0x6410            ;144
00026e  f6424010          MOV      r0,#0x2c10            ;144
000272  f2c40202          MOVT     r2,#0x4002            ;144
000276  f6c00003          MOVT     r0,#0x803             ;144
00027a  6010              STR      r0,[r2,#0]            ;144
00027c  1f18              SUBS     r0,r3,#4              ;153
                  |L1.638|
00027e  8802              LDRH     r2,[r0,#0]            ;153
000280  f0120f80          TST      r2,#0x80              ;153
000284  d1fb              BNE      |L1.638|
000286  881a              LDRH     r2,[r3,#0]            ;154
000288  882a              LDRH     r2,[r5,#0]            ;156
00028a  f4426200          ORR      r2,r2,#0x800          ;156
00028e  802a              STRH     r2,[r5,#0]            ;156
000290  8019              STRH     r1,[r3,#0]            ;157
                  |L1.658|
000292  8801              LDRH     r1,[r0,#0]            ;158
000294  f0110f02          TST      r1,#2                 ;158
000298  d0fb              BEQ      |L1.658|
                  |L1.666|
00029a  8801              LDRH     r1,[r0,#0]            ;159
00029c  f0110f01          TST      r1,#1                 ;159
0002a0  d0fb              BEQ      |L1.666|
0002a2  8818              LDRH     r0,[r3,#0]            ;160
0002a4  f2464108          MOV      r1,#0x6408            ;162
0002a8  f2c40102          MOVT     r1,#0x4002            ;162
0002ac  f640707d          MOV      r0,#0xf7d             ;162
0002b0  6008              STR      r0,[r1,#0]            ;162
0002b2  f44f4100          MOV      r1,#0x8000            ;163
0002b6  f2c4214c          MOVT     r1,#0x424c            ;163
0002ba  2001              MOVS     r0,#1                 ;163
0002bc  f8c10200          STR      r0,[r1,#0x200]        ;163
0002c0  f44f4105          MOV      r1,#0x8500            ;164
0002c4  f2c4214c          MOVT     r1,#0x424c            ;164
0002c8  6008              STR      r0,[r1,#0]            ;164
0002ca  f8ac4000          STRH     r4,[r12,#0]           ;165
0002ce  bcf0              POP      {r4-r7}
0002d0  4770              BX       lr
;;;169    
                          ENDP

                  DMA2_Stream0_IRQHandler PROC
;;;170    void DMA2_Stream0_IRQHandler() { DMA2->LIFCR	= (0x3Dul << 0);	FramCS	=	1;}
0002d2  f2464108          MOV      r1,#0x6408
0002d6  f2c40102          MOVT     r1,#0x4002
0002da  203d              MOVS     r0,#0x3d
0002dc  6008              STR      r0,[r1,#0]
0002de  2001              MOVS     r0,#1
0002e0  2100              MOVS     r1,#0
0002e2  f2c42142          MOVT     r1,#0x4242
0002e6  f8c10290          STR      r0,[r1,#0x290]
0002ea  4770              BX       lr
;;;171    void DMA2_Stream1_IRQHandler() { DMA2->LIFCR	= (0x3Dul << 6);}
                          ENDP

                  DMA2_Stream1_IRQHandler PROC
0002ec  f2464108          MOV      r1,#0x6408
0002f0  f2c40102          MOVT     r1,#0x4002
0002f4  f44f6074          MOV      r0,#0xf40
0002f8  6008              STR      r0,[r1,#0]
0002fa  4770              BX       lr
;;;172    
                          ENDP

                  SaveParamsProc PROC
;;;173    
;;;174    void SaveParamsProc() {
0002fc  e92d43f0          PUSH     {r4-r9,lr}
;;;175    unsigned int *DataPtr;
;;;176    				 int TempRecSize;	
;;;177    				 int i;
;;;178    
;;;179    	if ((EvPrms.EventCode & 0x53) == 0x53)	{
000300  f2400400          MOVW     r4,#:LOWER16: Metro
000304  f2c00400          MOVT     r4,#:UPPER16: Metro
000308  6820              LDR      r0,[r4,#0]  ; Metro
00030a  2153              MOVS     r1,#0x53
00030c  4381              BICS     r1,r1,r0
00030e  4620              MOV      r0,r4
000310  f04f0500          MOV      r5,#0
;;;180    		if (FramWrite((unsigned int *)&EvPrms, StdPrms.CurrentEvent * EventRecordMaxSize * 4, EvRecSize)) {
000314  f9b0020c          LDRSH    r0,[r0,#0x20c]
000318  d017              BEQ      |L1.842|
;;;181    			EvPrms.EventCode &= ~0xFFul; 
;;;182    			if (++StdPrms.CurrentEvent >= NumberOfEventRecords) {StdPrms.CurrentEvent = 0;}
;;;183    			StdPrms.FlagSaveEvent = StdPrms.CurrentEvent | 0x8000;	
;;;184    		} else return;
;;;185    	} else
;;;186    
;;;187    	if (StdPrms.FlagSaveEvent & 0x8000) {
00031a  f8b4120e          LDRH     r1,[r4,#0x20e]  ; Metro
00031e  f4114f00          TST      r1,#0x8000
000322  d032              BEQ      |L1.906|
;;;188    		if (FramWrite((unsigned int *)&StdPrms.CurrentEvent, FramEventNumAddr, 4)) { StdPrms.FlagSaveEvent &= ~0x8000; } else return;
000324  2204              MOVS     r2,#4
000326  f44f41c8          MOV      r1,#0x6400
00032a  f5047003          ADD      r0,r4,#0x20c
00032e  f7fffffe          BL       FramWrite
000332  2800              CMP      r0,#0
000334  bf1a              ITTE     NE
000336  f8b4020e          LDRHNE   r0,[r4,#0x20e]  ; Metro
00033a  f4204000          BICNE    r0,r0,#0x8000
;;;189    	} else
;;;190    	
;;;191    	if (SaveParamCount)	{
;;;192    		if (SaveParamCount*32*4 >= (ParRecSize - 32*4)) {
;;;193    			LoadBuffer[0] = CRC->DR;
;;;194    			if (FramWrite(LoadBuffer, FramCRCAddr, 32*4 + 4)) { SaveParamCount = 0;	} else return;
;;;195    		} 
;;;196    		else
;;;197    		/* Если осталось >= 32 слова, то разбиваем на несколько циклов								*/
;;;198    		{
;;;199    			DataPtr 		= (unsigned int *)&SavePrms + 32*SaveParamCount + 32;
;;;200    			TempRecSize = MIN(32*4, ParRecSize - 32*4 - 32*4*SaveParamCount);
;;;201    			for (i = 33; i <= ((TempRecSize >> 2) + 32); i++) { LoadBuffer[i] = CRC->DR = *DataPtr++; }
;;;202    			if (FramWrite(LoadBuffer+32+1, FramParamAddr + 32*4 + 32*4*SaveParamCount, TempRecSize)) { SaveParamCount++; } else return;			
;;;203    		}		
;;;204    	} else
;;;205    	
;;;206    	if (StdPrms.SaveParam) {
;;;207    		CRC->CR	=	0x01;																/*	Сбрасываем регистр CRC --------	*/
;;;208    		/* Если размер записи <= 32 слов, то записываем единым потоком										*/
;;;209    		if (ParRecSize <= 32*4)	{
;;;210    			DataPtr = (unsigned int *)&SavePrms;
;;;211    			for (i = 1; i <= (ParRecSize >> 2); i++) { LoadBuffer[i] = CRC->DR = *DataPtr++; }
;;;212    			LoadBuffer[0] = CRC->DR;
;;;213    			if (FramWrite(LoadBuffer, FramCRCAddr, ParRecSize + 4)) { StdPrms.SaveParam = 0; } else return;
;;;214    		} 
;;;215    		else
;;;216    		/* Если размер записи >= 32 слова, то разбиваем на несколько циклов								*/
;;;217    		{
;;;218    			DataPtr 		= (unsigned int *)&SavePrms;
;;;219    			TempRecSize = MIN(32*4, ParRecSize - 32*4);
;;;220    			for (i = 1; i <= ((TempRecSize >> 2) + 32) ; i++) { LoadBuffer[i] = CRC->DR = *DataPtr++; }
;;;221    			if (FramWrite(LoadBuffer+32+1, FramParamAddr + 32*4, TempRecSize)) {
;;;222    				SaveParamCount 		= 1;
;;;223    				StdPrms.SaveParam = 0;
;;;224    			} else return;			
;;;225    		}	
;;;226    	} else
;;;227    	
;;;228    	if ((StdPrms.LoadEvent > 0) && (StdPrms.LoadEvent <= NumberOfEventRecords)) {
;;;229    		i = StdPrms.CurrentEvent - StdPrms.LoadEvent;
;;;230    		if (i < 0) i += NumberOfEventRecords;
;;;231    		if (FramRead((unsigned int *)&EvPrms_l, i * EventRecordMaxSize * 4, EvRecSize)) { StdPrms.LoadEvent = 0; } else return;			
;;;232    	}
;;;233    }
00033e  e8bd83f0          POPEQ    {r4-r9,pc}
                  |L1.834|
000342  f8a4020e          STRH     r0,[r4,#0x20e]        ;183
000346  e8bd83f0          POP      {r4-r9,pc}
                  |L1.842|
00034a  0201              LSLS     r1,r0,#8              ;180
00034c  f44f7280          MOV      r2,#0x100             ;180
000350  f2400000          MOVW     r0,#:LOWER16: Metro
000354  f2c00000          MOVT     r0,#:UPPER16: Metro
000358  f7fffffe          BL       FramWrite
00035c  2800              CMP      r0,#0                 ;180
00035e  bf08              IT       EQ
000360  e8bd83f0          POPEQ    {r4-r9,pc}
000364  6820              LDR      r0,[r4,#0]            ;181  ; Metro
000366  f02000ff          BIC      r0,r0,#0xff           ;181
00036a  6020              STR      r0,[r4,#0]            ;182  ; Metro
00036c  f8b4020c          LDRH     r0,[r4,#0x20c]        ;182  ; Metro
000370  1c40              ADDS     r0,r0,#1              ;182
000372  b200              SXTH     r0,r0                 ;182
000374  f8a4020c          STRH     r0,[r4,#0x20c]        ;182
000378  2864              CMP      r0,#0x64              ;182
00037a  bf28              IT       CS                    ;182
00037c  f8a4520c          STRHCS   r5,[r4,#0x20c]        ;182
000380  f8b4020c          LDRH     r0,[r4,#0x20c]        ;183  ; Metro
000384  f4404000          ORR      r0,r0,#0x8000         ;183
000388  e7db              B        |L1.834|
                  |L1.906|
00038a  f2400600          MOVW     r6,#:LOWER16: ||.data||;191
00038e  f2c00600          MOVT     r6,#:UPPER16: ||.data||;191
000392  f44f5c40          MOV      r12,#0x3000           ;193
000396  f2c40c02          MOVT     r12,#0x4002           ;193
00039a  f2400300          MOVW     r3,#:LOWER16: ||.bss||;193
00039e  f2c00300          MOVT     r3,#:UPPER16: ||.bss||;193
0003a2  6877              LDR      r7,[r6,#4]            ;191  ; SaveParamCount
0003a4  f04f0820          MOV      r8,#0x20              ;201
0003a8  2f00              CMP      r7,#0                 ;191
0003aa  d040              BEQ      |L1.1070|
0003ac  f44f6034          MOV      r0,#0xb40             ;192
0003b0  ebb01fc7          CMP      r0,r7,LSL #7          ;192
0003b4  d80d              BHI      |L1.978|
0003b6  f8dc0000          LDR      r0,[r12,#0]           ;193
0003ba  6018              STR      r0,[r3,#0]            ;194  ; LoadBuffer
0003bc  2284              MOVS     r2,#0x84              ;194
0003be  f2464104          MOV      r1,#0x6404            ;194
0003c2  4618              MOV      r0,r3                 ;194
0003c4  f7fffffe          BL       FramWrite
0003c8  2800              CMP      r0,#0                 ;194
0003ca  bf18              IT       NE                    ;194
0003cc  6075              STRNE    r5,[r6,#4]            ;194  ; SaveParamCount
0003ce  e8bd83f0          POP      {r4-r9,pc}
                  |L1.978|
0003d2  427a              RSBS     r2,r7,#0              ;200
0003d4  eb0411c7          ADD      r1,r4,r7,LSL #7       ;199
0003d8  eb0010c2          ADD      r0,r0,r2,LSL #7       ;200
0003dc  f5016190          ADD      r1,r1,#0x480          ;200
0003e0  2880              CMP      r0,#0x80              ;200
0003e2  bf88              IT       HI                    ;200
0003e4  2480              MOVHI    r4,#0x80              ;200
0003e6  d802              BHI      |L1.1006|
0003e8  01f8              LSLS     r0,r7,#7              ;200
0003ea  f5c06434          RSB      r4,r0,#0xb40          ;200
                  |L1.1006|
0003ee  2021              MOVS     r0,#0x21              ;201
0003f0  eb0805a4          ADD      r5,r8,r4,ASR #2       ;201
0003f4  2d21              CMP      r5,#0x21              ;201
0003f6  db08              BLT      |L1.1034|
                  |L1.1016|
0003f8  f8512b04          LDR      r2,[r1],#4            ;201
0003fc  f8cc2000          STR      r2,[r12,#0]           ;201
000400  f8432020          STR      r2,[r3,r0,LSL #2]     ;201
000404  1c40              ADDS     r0,r0,#1              ;201
000406  4285              CMP      r5,r0                 ;201
000408  daf6              BGE      |L1.1016|
                  |L1.1034|
00040a  f2464088          MOV      r0,#0x6488            ;202
00040e  eb0011c7          ADD      r1,r0,r7,LSL #7       ;202
000412  b2a2              UXTH     r2,r4                 ;202
000414  f1030084          ADD      r0,r3,#0x84           ;202
000418  f7fffffe          BL       FramWrite
00041c  2800              CMP      r0,#0                 ;202
00041e  bf08              IT       EQ
000420  e8bd83f0          POPEQ    {r4-r9,pc}
000424  6870              LDR      r0,[r6,#4]            ;202  ; SaveParamCount
000426  1c40              ADDS     r0,r0,#1              ;202
000428  6070              STR      r0,[r6,#4]            ;202  ; SaveParamCount
00042a  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1070|
00042e  f8b41200          LDRH     r1,[r4,#0x200]        ;206  ; Metro
000432  b1f1              CBZ      r1,|L1.1138|
000434  2701              MOVS     r7,#1                 ;207
000436  f8cc7008          STR      r7,[r12,#8]           ;207
00043a  2280              MOVS     r2,#0x80              ;219
00043c  f5046180          ADD      r1,r4,#0x400          ;218
000440  4638              MOV      r0,r7                 ;220
000442  eb0809a2          ADD      r9,r8,r2,ASR #2       ;201
                  |L1.1094|
000446  f8518b04          LDR      r8,[r1],#4            ;220
00044a  f8cc8000          STR      r8,[r12,#0]           ;220
00044e  f8438020          STR      r8,[r3,r0,LSL #2]     ;220
000452  1c40              ADDS     r0,r0,#1              ;220
000454  4581              CMP      r9,r0                 ;220
000456  daf6              BGE      |L1.1094|
000458  f2464188          MOV      r1,#0x6488            ;221
00045c  f1030084          ADD      r0,r3,#0x84           ;221
000460  f7fffffe          BL       FramWrite
000464  2800              CMP      r0,#0                 ;221
000466  bf1c              ITT      NE                    ;222
000468  6077              STRNE    r7,[r6,#4]            ;222  ; SaveParamCount
00046a  f8a45200          STRHNE   r5,[r4,#0x200]        ;223
00046e  e8bd83f0          POP      {r4-r9,pc}
                  |L1.1138|
000472  f9b41210          LDRSH    r1,[r4,#0x210]        ;228  ; Metro
000476  2900              CMP      r1,#0                 ;228
000478  bfd8              IT       LE
00047a  e8bd83f0          POPLE    {r4-r9,pc}
00047e  2964              CMP      r1,#0x64              ;228
000480  bf88              IT       HI
000482  e8bd83f0          POPHI    {r4-r9,pc}
000486  1a40              SUBS     r0,r0,r1              ;229
000488  bf48              IT       MI                    ;229
00048a  3064              ADDMI    r0,r0,#0x64           ;229
00048c  f64f71ff          MOV      r1,#0xffff            ;231
000490  ea012100          AND      r1,r1,r0,LSL #8       ;231
000494  f44f7280          MOV      r2,#0x100             ;231
000498  f5047080          ADD      r0,r4,#0x100          ;231
00049c  f7fffffe          BL       FramRead
0004a0  2800              CMP      r0,#0                 ;231
0004a2  bf18              IT       NE                    ;231
0004a4  f8a45210          STRHNE   r5,[r4,#0x210]        ;231
0004a8  e8bd83f0          POP      {r4-r9,pc}
;;;234    
                          ENDP

                  LoadParamsProc PROC
;;;235    int LoadParamsProc() {
0004ac  b530              PUSH     {r4,r5,lr}
;;;236    int i;
;;;237    unsigned int *DataPtr = (unsigned int *)&SavePrms;	
0004ae  f2400500          MOVW     r5,#:LOWER16: Metro
0004b2  f2c00500          MOVT     r5,#:UPPER16: Metro
0004b6  f5056480          ADD      r4,r5,#0x400
;;;238    	
;;;239    	if (FramRead(LoadBuffer, FramEventNumAddr, ParRecSize + 8)) {
0004ba  f64032c8          MOV      r2,#0xbc8
0004be  f44f41c8          MOV      r1,#0x6400
0004c2  f2400000          MOVW     r0,#:LOWER16: ||.bss||
0004c6  f2c00000          MOVT     r0,#:UPPER16: ||.bss||
0004ca  f7fffffe          BL       FramRead
0004ce  2800              CMP      r0,#0
;;;240    		while (FramCS == 0);																													/* ожидаем окончания загрузки				*/
0004d0  bf19              ITTEE    NE
0004d2  2000              MOVNE    r0,#0
0004d4  f2c42042          MOVTNE   r0,#0x4242
;;;241    
;;;242    		i = LoadBuffer[0];
;;;243    		if ((i & 0xFFFF) != ((i & 0x7FFF0000) >> 16)) i = 0;
;;;244    		StdPrms.CurrentEvent = i;
;;;245    		
;;;246    		CRC->CR	=	0x01;																																/*	Сбрасываем регистр CRC --------	*/
;;;247    		for (i = 2; i < ((ParRecSize >> 2) + 2); i++) { CRC->DR = LoadBuffer[i]; }
;;;248    		if (CRC->DR != LoadBuffer[1]) return 2;
;;;249    		for (i = 2; i < ((ParRecSize >> 2) + 2); i++) *DataPtr++ = LoadBuffer[i];
;;;250    
;;;251    		return 0;
;;;252    	} else return 1;
0004d8  2001              MOVEQ    r0,#1
;;;253    }
0004da  bd30              POPEQ    {r4,r5,pc}
                  |L1.1244|
0004dc  f8d01290          LDR      r1,[r0,#0x290]        ;240
0004e0  2900              CMP      r1,#0                 ;240
0004e2  d0fb              BEQ      |L1.1244|
0004e4  f2400100          MOVW     r1,#:LOWER16: ||.bss||;242
0004e8  f2c00100          MOVT     r1,#:UPPER16: ||.bss||;242
0004ec  6808              LDR      r0,[r1,#0]            ;243  ; LoadBuffer
0004ee  b282              UXTH     r2,r0                 ;243
0004f0  f3c0430e          UBFX     r3,r0,#16,#15         ;243
0004f4  429a              CMP      r2,r3                 ;243
0004f6  bf18              IT       NE                    ;243
0004f8  2000              MOVNE    r0,#0                 ;243
0004fa  f8a5020c          STRH     r0,[r5,#0x20c]        ;244
0004fe  f44f5340          MOV      r3,#0x3000            ;246
000502  f2c40302          MOVT     r3,#0x4002            ;246
000506  2001              MOVS     r0,#1                 ;246
000508  6098              STR      r0,[r3,#8]            ;246
00050a  2002              MOVS     r0,#2                 ;247
00050c  f24022f2          MOV      r2,#0x2f2             ;247
                  |L1.1296|
000510  f851c020          LDR      r12,[r1,r0,LSL #2]    ;247
000514  f8c3c000          STR      r12,[r3,#0]           ;247
000518  1c40              ADDS     r0,r0,#1              ;247
00051a  4290              CMP      r0,r2                 ;247
00051c  d3f8              BCC      |L1.1296|
00051e  6818              LDR      r0,[r3,#0]            ;248
000520  684b              LDR      r3,[r1,#4]            ;248  ; LoadBuffer
000522  4298              CMP      r0,r3                 ;248
000524  f04f0002          MOV      r0,#2                 ;249
000528  bf18              IT       NE
00052a  bd30              POPNE    {r4,r5,pc}
                  |L1.1324|
00052c  f8513020          LDR      r3,[r1,r0,LSL #2]     ;249
000530  1c40              ADDS     r0,r0,#1              ;249
000532  f8443b04          STR      r3,[r4],#4            ;249
000536  4290              CMP      r0,r2                 ;249
000538  d3f8              BCC      |L1.1324|
00053a  2000              MOVS     r0,#0                 ;251
00053c  bd30              POP      {r4,r5,pc}
;;;254    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  LoadBuffer
                          %        7168

                          AREA ||.data||, DATA, ALIGN=2

                  SPI_Tresh
                          DCD      0x00000000
                  SaveParamCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "PERIPH\\fram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_fram_c_InitFram____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___6_fram_c_InitFram____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_fram_c_InitFram____REVSH|
#line 144
|__asm___6_fram_c_InitFram____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
