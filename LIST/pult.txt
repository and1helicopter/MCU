; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\pult.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\pult.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\pult.crf PERIPH\pult.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  ClearScreen PROC
;;;57     
;;;58     void ClearScreen(void) {
000000  2008              MOVS     r0,#8
;;;59     int i;	
;;;60     for (i = 8; i > 0; i--) {((int*)SendPultBuff)[i] = 0x20202020;}
000002  f04f3220          MOV      r2,#0x20202020
000006  f2400100          MOVW     r1,#:LOWER16: ||.data||+48
00000a  f2c00100          MOVT     r1,#:UPPER16: ||.data||+48
                  |L1.14|
00000e  f8412020          STR      r2,[r1,r0,LSL #2]
000012  1e40              SUBS     r0,r0,#1
000014  2800              CMP      r0,#0
000016  dcfa              BGT      |L1.14|
;;;61     SendPultBuff[3]  = 0x20;
000018  2020              MOVS     r0,#0x20
00001a  70c8              STRB     r0,[r1,#3]
;;;62     SendPultBuff[35] = 0x00;
00001c  2000              MOVS     r0,#0
00001e  f8810023          STRB     r0,[r1,#0x23]
;;;63     }	
000022  4770              BX       lr
;;;64     								
                          ENDP

                  InitPult PROC
;;;65     
;;;66     void InitPult(void) {
000024  f44f5061          MOV      r0,#0x3840
;;;67     	
;;;68     	if (PultSPI == SPI3) {																								
;;;69     		if (RCC->APB1ENR & RCC_APB1ENR_SPI3EN) return;											/* Уже инициализировано	*/
000028  f2c40002          MOVT     r0,#0x4002
00002c  6801              LDR      r1,[r0,#0]
00002e  f4114f00          TST      r1,#0x8000
;;;70     		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;																	/* Clock enable fo SPI 3*/
;;;71     	} else return;
;;;72     	
;;;73     	PultSPI->CR1 = 	SPI_CR1_SPE |				/*SPI Enable								*/
;;;74     									SPI_CR1_SSM | 			/*Software slave management	*/
;;;75     									SPI_CR1_SSI | 			/*Internal slave select			*/	
;;;76     									SPI_CR1_MSTR| 			/*Master selection					*/
;;;77     //									SPI_CR1_CPHA| 			/*Clock phase								*/
;;;78     									(7ul << 3);					/*Clock / 256								*/
;;;79     }
000032  bf18              IT       NE
000034  4770              BXNE     lr
000036  6801              LDR      r1,[r0,#0]            ;70
000038  f4414100          ORR      r1,r1,#0x8000         ;70
00003c  6001              STR      r1,[r0,#0]            ;70
00003e  f44f5170          MOV      r1,#0x3c00            ;73
000042  f2c40100          MOVT     r1,#0x4000            ;73
000046  f44f705f          MOV      r0,#0x37c             ;73
00004a  8008              STRH     r0,[r1,#0]            ;73
00004c  4770              BX       lr
;;;80     
                          ENDP

                  PultUpdate PROC
;;;81     void PultUpdate(void) {
00004e  f2400100          MOVW     r1,#:LOWER16: ||.data||
;;;82     int WorkPultCount;
;;;83     	WorkPultCount = PultCount;
000052  f2c00100          MOVT     r1,#:UPPER16: ||.data||
000056  6808              LDR      r0,[r1,#0]  ; PultCount
;;;84       if (WorkPultCount > 36) return;
000058  2824              CMP      r0,#0x24
;;;85       if (WorkPultCount > 0)  WorkPultKeyb |= PultSPI->DR;
;;;86       if (WorkPultCount < 36)	PultSPI->DR = WorkPultBuff[WorkPultCount];
;;;87       PultCount = WorkPultCount + 1;	
;;;88     }
00005a  bfc8              IT       GT
00005c  4770              BXGT     lr
00005e  f643420c          MOV      r2,#0x3c0c            ;85
000062  f2c40200          MOVT     r2,#0x4000            ;85
000066  2800              CMP      r0,#0                 ;85
000068  dd07              BLE      |L1.122|
00006a  8813              LDRH     r3,[r2,#0]            ;85
00006c  f8d1c004          LDR      r12,[r1,#4]           ;85  ; WorkPultKeyb
000070  2824              CMP      r0,#0x24              ;86
000072  ea43030c          ORR      r3,r3,r12             ;85
000076  604b              STR      r3,[r1,#4]            ;86  ; WorkPultKeyb
000078  da05              BGE      |L1.134|
                  |L1.122|
00007a  f2400300          MOVW     r3,#:LOWER16: ||.data||+12;86
00007e  f2c00300          MOVT     r3,#:UPPER16: ||.data||+12;86
000082  5c1b              LDRB     r3,[r3,r0]            ;86
000084  8013              STRH     r3,[r2,#0]            ;86
                  |L1.134|
000086  1c40              ADDS     r0,r0,#1              ;86
000088  6008              STR      r0,[r1,#0]            ;87  ; PultCount
00008a  4770              BX       lr
;;;89     
                          ENDP

                  WaitPultReady PROC
;;;90     int WaitPultReady(void) {
00008c  f2400000          MOVW     r0,#:LOWER16: ||.data||
;;;91     	return (PultCount > 36) ? (WorkPultKeyb | 0x80) : 0;	
000090  f2c00000          MOVT     r0,#:UPPER16: ||.data||
000094  6801              LDR      r1,[r0,#0]  ; PultCount
000096  2924              CMP      r1,#0x24
000098  bfc6              ITTE     GT
00009a  6840              LDRGT    r0,[r0,#4]  ; WorkPultKeyb
00009c  f0400080          ORRGT    r0,r0,#0x80
0000a0  2000              MOVLE    r0,#0
;;;92     }	
0000a2  4770              BX       lr
;;;93     
                          ENDP

                  PultRefresh PROC
;;;94     int PultRefresh(void) {
0000a4  f2400c00          MOVW     r12,#:LOWER16: ||.data||
;;;95     int i;	
;;;96     	if (PultCount < 37) return 1;																											/* Pult not Ready							*/
0000a8  f2c00c00          MOVT     r12,#:UPPER16: ||.data||
0000ac  f8dc0000          LDR      r0,[r12,#0]  ; PultCount
0000b0  2825              CMP      r0,#0x25
0000b2  bfbc              ITT      LT
0000b4  2001              MOVLT    r0,#1
;;;97     	
;;;98       for (i = 8; i >= 0; i--) {((int*)WorkPultBuff)[i] = ((int*)SendPultBuff)[i];}			/* Copy data to work buffer		*/	
;;;99     
;;;100      WorkPultBuff[0]  = (Leds&0x3F)|0x40;																							/* Leds 											*/							
;;;101    	SendPultBuff[35] = 0;																															/* Disable change SHIFT mode	*/
;;;102    	
;;;103      WorkPultKeyb = 0;																																	/**/
;;;104      PultCount = 0;
;;;105    
;;;106    	return 0;																																					/* return OK	*/
;;;107    }
0000b6  4770              BXLT     lr
0000b8  2008              MOVS     r0,#8                 ;98
0000ba  f2400100          MOVW     r1,#:LOWER16: ||.data||+48;98
0000be  f2c00100          MOVT     r1,#:UPPER16: ||.data||+48;98
0000c2  f1a10224          SUB      r2,r1,#0x24           ;98
                  |L1.198|
0000c6  f8513020          LDR      r3,[r1,r0,LSL #2]     ;98
0000ca  f8423020          STR      r3,[r2,r0,LSL #2]     ;98
0000ce  1e40              SUBS     r0,r0,#1              ;98
0000d0  d5f9              BPL      |L1.198|
0000d2  f89c0008          LDRB     r0,[r12,#8]           ;100  ; Leds
0000d6  f000003f          AND      r0,r0,#0x3f           ;100
0000da  f0400040          ORR      r0,r0,#0x40           ;100
0000de  7010              STRB     r0,[r2,#0]            ;100
0000e0  2000              MOVS     r0,#0                 ;101
0000e2  f8810023          STRB     r0,[r1,#0x23]         ;101
0000e6  f8cc0004          STR      r0,[r12,#4]           ;104  ; WorkPultKeyb
0000ea  f8cc0000          STR      r0,[r12,#0]           ;104  ; PultCount
0000ee  4770              BX       lr
;;;108    
                          ENDP

                  lcdoutDT PROC
;;;165    
;;;166    void  lcdoutDT(int D, int T, int SS) {
0000f0  b530              PUSH     {r4,r5,lr}
;;;167    int pos = 3;
;;;168    int i;
;;;169    char DayWeek[16] = {' ',' ',0xA8,'H','B','T','C','P',0xAB,'T',0xA8,'T','C',0xA0,'B','C'};		/* Недели по-русски */
0000f2  a3fe              ADR      r3,|L1.1260|
0000f4  4604              MOV      r4,r0                 ;166
0000f6  e8931029          LDM      r3,{r0,r3,r5,r12}
0000fa  b08b              SUB      sp,sp,#0x2c           ;166
0000fc  f10d0e18          ADD      lr,sp,#0x18
000100  e88e1029          STM      lr,{r0,r3,r5,r12}
;;;170    	
;;;171    		SS = ((SS * 5) >> 7);
000104  eb020082          ADD      r0,r2,r2,LSL #2
;;;172    		_snprintf(&SendPultBuff[3],33," : %2.2x/%2.2x/%4.4x   B: %2.2x:%2.2x:%2.2x.%1.1u   ",\
000108  f001027f          AND      r2,r1,#0x7f
00010c  11c0              ASRS     r0,r0,#7              ;171
00010e  f3c12306          UBFX     r3,r1,#8,#7
000112  f3c14105          UBFX     r1,r1,#16,#6
000116  e9cd2004          STRD     r2,r0,[sp,#0x10]
00011a  e9cd1302          STRD     r1,r3,[sp,#8]
00011e  f3c44007          UBFX     r0,r4,#16,#8
000122  f4405000          ORR      r0,r0,#0x2000
000126  f3c42104          UBFX     r1,r4,#8,#5
00012a  e9cd1000          STRD     r1,r0,[sp,#0]
00012e  f004033f          AND      r3,r4,#0x3f
000132  a2f2              ADR      r2,|L1.1276|
000134  2121              MOVS     r1,#0x21
000136  f2400500          MOVW     r5,#:LOWER16: ||.data||+48
00013a  f2c00500          MOVT     r5,#:UPPER16: ||.data||+48
00013e  1ce8              ADDS     r0,r5,#3
000140  f7fffffe          BL       _snprintf
;;;173    																	D&0x3F,(D>>8)&0x1F,((D>>16)&0xFF)|0x2000,(T>>16)&0x3F,(T>>8)&0x7F,T&0x7F,SS);
;;;174    
;;;175    		SendPultBuff[3] = 0xE0;																																	/* Буква Д */
000144  20e0              MOVS     r0,#0xe0
000146  70e8              STRB     r0,[r5,#3]
;;;176    		
;;;177    		i = (D & 0xE000) >> 12;
000148  200e              MOVS     r0,#0xe
00014a  ea003014          AND      r0,r0,r4,LSR #12
;;;178    		SendPultBuff[17] = DayWeek[i++];
00014e  a906              ADD      r1,sp,#0x18
000150  5c0a              LDRB     r2,[r1,r0]
000152  1c40              ADDS     r0,r0,#1
000154  746a              STRB     r2,[r5,#0x11]
;;;179    		SendPultBuff[18] = DayWeek[i];
000156  5c08              LDRB     r0,[r1,r0]
000158  74a8              STRB     r0,[r5,#0x12]
;;;180    }
00015a  b00b              ADD      sp,sp,#0x2c
00015c  bd30              POP      {r4,r5,pc}
;;;181    
                          ENDP

                  Display PROC
;;;108    
;;;109    __weak void Display(void) {
00015e  b08a              SUB      sp,sp,#0x28
000160  f2400700          MOVW     r7,#:LOWER16: ||.data||
000164  f2c00700          MOVT     r7,#:UPPER16: ||.data||
000168  f04f3920          MOV      r9,#0x20202020
00016c  f04f0a00          MOV      r10,#0
000170  f1070530          ADD      r5,r7,#0x30
;;;110    int PultKeyb = 0;
;;;111    while (1) {
;;;112    	do {PultKeyb = WaitPultReady();} while (PultKeyb == 0);			/* Ожидаем завершения передачи и получения нажатых кнопок на пульте	*/
;;;113    	ClearScreen();
;;;114    	lcdoutDT(EvPrms.RTC_Date,EvPrms.RTC_Time,EvPrms.RTC_SSC);
000174  f2400600          MOVW     r6,#:LOWER16: Metro
000178  f2c00600          MOVT     r6,#:UPPER16: Metro
00017c  f10d0818          ADD      r8,sp,#0x18
                  |L1.384|
000180  6838              LDR      r0,[r7,#0]  ; PultCount
000182  2824              CMP      r0,#0x24
000184  bfc6              ITTE     GT
000186  6878              LDRGT    r0,[r7,#4]  ; WorkPultKeyb
000188  f0400080          ORRGT    r0,r0,#0x80
00018c  2000              MOVLE    r0,#0
00018e  2800              CMP      r0,#0                 ;112
000190  bf18              IT       NE                    ;112
000192  2008              MOVNE    r0,#8                 ;112
000194  d0f4              BEQ      |L1.384|
                  |L1.406|
000196  f8459020          STR      r9,[r5,r0,LSL #2]     ;112
00019a  1e40              SUBS     r0,r0,#1              ;112
00019c  2800              CMP      r0,#0                 ;112
00019e  dcfa              BGT      |L1.406|
0001a0  2020              MOVS     r0,#0x20              ;112
0001a2  70e8              STRB     r0,[r5,#3]            ;112
0001a4  f885a023          STRB     r10,[r5,#0x23]        ;112
0001a8  a0d0              ADR      r0,|L1.1260|
0001aa  e9d61202          LDRD     r1,r2,[r6,#8]         ;112
0001ae  e8901809          LDM      r0,{r0,r3,r11,r12}    ;112
0001b2  6874              LDR      r4,[r6,#4]            ;112  ; Metro
0001b4  e9cd0306          STRD     r0,r3,[sp,#0x18]      ;112
0001b8  eb020082          ADD      r0,r2,r2,LSL #2       ;112
0001bc  f001027f          AND      r2,r1,#0x7f           ;112
0001c0  11c0              ASRS     r0,r0,#7              ;112
0001c2  f3c12306          UBFX     r3,r1,#8,#7           ;112
0001c6  f3c14105          UBFX     r1,r1,#16,#6          ;112
0001ca  e9cd2004          STRD     r2,r0,[sp,#0x10]      ;112
0001ce  e9cd1302          STRD     r1,r3,[sp,#8]         ;112
0001d2  f3c44007          UBFX     r0,r4,#16,#8          ;112
0001d6  f4405000          ORR      r0,r0,#0x2000         ;112
0001da  f3c42104          UBFX     r1,r4,#8,#5           ;112
0001de  e9cd1000          STRD     r1,r0,[sp,#0]         ;112
0001e2  e9cdbc08          STRD     r11,r12,[sp,#0x20]    ;112
0001e6  f004033f          AND      r3,r4,#0x3f           ;112
0001ea  a2c4              ADR      r2,|L1.1276|
0001ec  2121              MOVS     r1,#0x21              ;112
0001ee  1ce8              ADDS     r0,r5,#3              ;112
0001f0  f7fffffe          BL       _snprintf
0001f4  20e0              MOVS     r0,#0xe0              ;112
0001f6  70e8              STRB     r0,[r5,#3]            ;112
0001f8  200e              MOVS     r0,#0xe               ;112
0001fa  ea003014          AND      r0,r0,r4,LSR #12      ;112
0001fe  f8181000          LDRB     r1,[r8,r0]            ;112
000202  1c40              ADDS     r0,r0,#1              ;112
000204  7469              STRB     r1,[r5,#0x11]         ;112
000206  f8180000          LDRB     r0,[r8,r0]            ;112
00020a  74a8              STRB     r0,[r5,#0x12]         ;112
                  |L1.524|
;;;115    	while (PultRefresh());
00020c  f7fffffe          BL       PultRefresh
000210  2800              CMP      r0,#0
000212  d1fb              BNE      |L1.524|
000214  e7b4              B        |L1.384|
;;;116    	} /* while (1) */
;;;117    }	/* void Display() */	
;;;118    
                          ENDP

                  lcdoutBIN PROC
;;;120    /* -------------------------------------------------------------------------------------------------------------------------------------------- */	
;;;121    void lcdoutBIN(int pos, unsigned short num) {
000216  b410              PUSH     {r4}
;;;122    int i;
;;;123    for (i = 15; i >= 0; i--) { SendPultBuff[(pos++&0x1F)+3] = 0x30 + ((num >> i) & 0x0001);} //for
000218  220f              MOVS     r2,#0xf
00021a  f2400300          MOVW     r3,#:LOWER16: ||.data||+48
00021e  f2c00300          MOVT     r3,#:UPPER16: ||.data||+48
                  |L1.546|
000222  fa21fc02          LSR      r12,r1,r2
000226  f000041f          AND      r4,r0,#0x1f
00022a  f00c0c01          AND      r12,r12,#1
00022e  441c              ADD      r4,r4,r3
000230  f10c0c30          ADD      r12,r12,#0x30
000234  1c40              ADDS     r0,r0,#1
000236  f884c003          STRB     r12,[r4,#3]
00023a  1e52              SUBS     r2,r2,#1
00023c  d5f1              BPL      |L1.546|
;;;124    } //lcdoutU160
00023e  bc10              POP      {r4}
000240  4770              BX       lr
;;;125    
                          ENDP

                  lcdout PROC
;;;126    
;;;127    void lcdout(int pos, int chcount, unsigned char *str) {
000242  f000001f          AND      r0,r0,#0x1f
000246  b430              PUSH     {r4,r5}
;;;128    int i;
;;;129      pos = (pos & 0x1F) + 3;
;;;130      for (i = 0; i < chcount; i++) { 
000248  2300              MOVS     r3,#0
00024a  1cc0              ADDS     r0,r0,#3
00024c  2900              CMP      r1,#0
;;;131    		SendPultBuff[pos++] = TableRusLCD[str[i]];
00024e  bfc3              ITTTE    GT
000250  f2400400          MOVWGT   r4,#:LOWER16: ||.data||+84
000254  f2c00400          MOVTGT   r4,#:UPPER16: ||.data||+84
000258  f1a40c24          SUBGT    r12,r4,#0x24
;;;132        if (pos > 34) return;
;;;133    		}//for
;;;134    }
00025c  bc30              POPLE    {r4,r5}
00025e  bfd8              IT       LE
000260  4770              BXLE     lr
                  |L1.610|
000262  5cd5              LDRB     r5,[r2,r3]            ;131
000264  5d65              LDRB     r5,[r4,r5]            ;131
000266  f80c5000          STRB     r5,[r12,r0]           ;131
00026a  1c40              ADDS     r0,r0,#1              ;131
00026c  2822              CMP      r0,#0x22              ;132
00026e  bfdc              ITT      LE                    ;132
000270  1c5b              ADDLE    r3,r3,#1              ;132
000272  428b              CMPLE    r3,r1                 ;130
000274  dbf5              BLT      |L1.610|
000276  bc30              POP      {r4,r5}
000278  4770              BX       lr
;;;135    
                          ENDP

                  lcdouttextl PROC
;;;136    void lcdouttextl(int pos, float num, int prec, unsigned char str[]) {
00027a  b570              PUSH     {r4-r6,lr}
;;;137    char buff[11];
;;;138    int i=0;
00027c  2500              MOVS     r5,#0
00027e  b084              SUB      sp,sp,#0x10           ;136
000280  4616              MOV      r6,r2                 ;136
000282  4604              MOV      r4,r0                 ;136
;;;139    	switch (prec) {
000284  2900              CMP      r1,#0
000286  d037              BEQ      |L1.760|
000288  2901              CMP      r1,#1
00028a  d042              BEQ      |L1.786|
;;;140    		case 0:  {sprintf(buff,"%-10.0f",num);} break;
;;;141    		case 1:  {sprintf(buff,"%-10.1f",num);} break;
;;;142    		case 2:  {sprintf(buff,"%-10.2f",num);} break;
00028c  ee100a10          VMOV     r0,s0
000290  2902              CMP      r1,#2                 ;139
000292  d04b              BEQ      |L1.812|
;;;143    		default: {sprintf(buff,"%-10.3f",num);} break;
000294  f7fffffe          BL       __aeabi_f2d
000298  ec410b10          VMOV     d0,r0,r1
00029c  a1a5              ADR      r1,|L1.1332|
00029e  ec532b10          VMOV     r2,r3,d0
0002a2  4668              MOV      r0,sp
0002a4  f7fffffe          BL       __2sprintf
                  |L1.680|
0002a8  466a              MOV      r2,sp                 ;137
;;;144    		}//switch
;;;145    	for (i=0; i<10; i++) if (buff[i]!=' ') {SendPultBuff[(pos++&0x1F)+3] = buff[i];} 
0002aa  f2400100          MOVW     r1,#:LOWER16: ||.data||+48
0002ae  f2c00100          MOVT     r1,#:UPPER16: ||.data||+48
                  |L1.690|
0002b2  5d50              LDRB     r0,[r2,r5]
0002b4  2820              CMP      r0,#0x20
0002b6  d004              BEQ      |L1.706|
0002b8  f004031f          AND      r3,r4,#0x1f
0002bc  440b              ADD      r3,r3,r1
0002be  1c64              ADDS     r4,r4,#1
0002c0  70d8              STRB     r0,[r3,#3]
                  |L1.706|
0002c2  1c6d              ADDS     r5,r5,#1
0002c4  2d0a              CMP      r5,#0xa
0002c6  dbf4              BLT      |L1.690|
;;;146    	for (i=0; str[i]!='\0'; i++) {SendPultBuff[(pos++&0x1F)+3] = TableRusLCD[str[i]];} 
0002c8  7832              LDRB     r2,[r6,#0]
0002ca  2000              MOVS     r0,#0
0002cc  2a00              CMP      r2,#0
0002ce  bf19              ITTEE    NE
0002d0  f2400200          MOVWNE   r2,#:LOWER16: ||.data||+84
0002d4  f2c00200          MOVTNE   r2,#:UPPER16: ||.data||+84
;;;147    }//lcdouttext
0002d8  b004              ADDEQ    sp,sp,#0x10
0002da  bd70              POPEQ    {r4-r6,pc}
                  |L1.732|
0002dc  5c33              LDRB     r3,[r6,r0]            ;146
0002de  f0040c1f          AND      r12,r4,#0x1f          ;146
0002e2  448c              ADD      r12,r12,r1            ;146
0002e4  5cd3              LDRB     r3,[r2,r3]            ;146
0002e6  1c40              ADDS     r0,r0,#1              ;146
0002e8  f88c3003          STRB     r3,[r12,#3]           ;146
0002ec  5c33              LDRB     r3,[r6,r0]            ;146
0002ee  1c64              ADDS     r4,r4,#1              ;146
0002f0  2b00              CMP      r3,#0                 ;146
0002f2  d1f3              BNE      |L1.732|
0002f4  b004              ADD      sp,sp,#0x10
0002f6  bd70              POP      {r4-r6,pc}
                  |L1.760|
0002f8  ee100a10          VMOV     r0,s0                 ;140
0002fc  f7fffffe          BL       __aeabi_f2d
000300  ec410b10          VMOV     d0,r0,r1              ;140
000304  a18d              ADR      r1,|L1.1340|
000306  ec532b10          VMOV     r2,r3,d0              ;140
00030a  4668              MOV      r0,sp                 ;140
00030c  f7fffffe          BL       __2sprintf
000310  e7ca              B        |L1.680|
                  |L1.786|
000312  ee100a10          VMOV     r0,s0                 ;141
000316  f7fffffe          BL       __aeabi_f2d
00031a  ec410b10          VMOV     d0,r0,r1              ;141
00031e  a189              ADR      r1,|L1.1348|
000320  ec532b10          VMOV     r2,r3,d0              ;141
000324  4668              MOV      r0,sp                 ;141
000326  f7fffffe          BL       __2sprintf
00032a  e7bd              B        |L1.680|
                  |L1.812|
00032c  f7fffffe          BL       __aeabi_f2d
000330  ec410b10          VMOV     d0,r0,r1              ;142
000334  a185              ADR      r1,|L1.1356|
000336  ec532b10          VMOV     r2,r3,d0              ;142
00033a  4668              MOV      r0,sp                 ;142
00033c  f7fffffe          BL       __2sprintf
000340  e7b2              B        |L1.680|
;;;148    
                          ENDP

                  lcdouthex8 PROC
;;;149    
;;;150    void  lcdouthex8(int pos, int num) {
000342  b530              PUSH     {r4,r5,lr}
000344  b083              SUB      sp,sp,#0xc
000346  4604              MOV      r4,r0
;;;151    char buff[11];
;;;152     int i;
;;;153     int l;	
;;;154      l = _snprintf(buff,11,"0x%.8X",num);
000348  460b              MOV      r3,r1
00034a  a282              ADR      r2,|L1.1364|
00034c  210b              MOVS     r1,#0xb
00034e  4668              MOV      r0,sp
000350  f7fffffe          BL       _snprintf
;;;155      for (i=0; i<l; i++) {SendPultBuff[(pos++&0x1F)+3] = buff[i];} 
000354  2100              MOVS     r1,#0
000356  2800              CMP      r0,#0
000358  bfc3              ITTTE    GT                    ;151
00035a  466a              MOVGT    r2,sp                 ;151
00035c  f2400300          MOVWGT   r3,#:LOWER16: ||.data||+48
000360  f2c00300          MOVTGT   r3,#:UPPER16: ||.data||+48
;;;156    }
000364  b003              ADDLE    sp,sp,#0xc
000366  bfd8              IT       LE
000368  bd30              POPLE    {r4,r5,pc}
                  |L1.874|
00036a  f812c001          LDRB     r12,[r2,r1]           ;155
00036e  f004051f          AND      r5,r4,#0x1f           ;155
000372  441d              ADD      r5,r5,r3              ;155
000374  1c49              ADDS     r1,r1,#1              ;155
000376  1c64              ADDS     r4,r4,#1              ;155
000378  f885c003          STRB     r12,[r5,#3]           ;155
00037c  4288              CMP      r0,r1                 ;155
00037e  dcf4              BGT      |L1.874|
000380  b003              ADD      sp,sp,#0xc
000382  bd30              POP      {r4,r5,pc}
;;;157    
                          ENDP

                  lcdouthex4 PROC
;;;158    void  lcdouthex4(int pos, short num) {
000384  b530              PUSH     {r4,r5,lr}
000386  b083              SUB      sp,sp,#0xc
000388  4604              MOV      r4,r0
;;;159    char buff[11];
;;;160     int i;
;;;161     int l;	
;;;162      l = _snprintf(buff,11,"0x%.4hX",num);
00038a  460b              MOV      r3,r1
00038c  a273              ADR      r2,|L1.1372|
00038e  210b              MOVS     r1,#0xb
000390  4668              MOV      r0,sp
000392  f7fffffe          BL       _snprintf
;;;163      for (i=0; i<l; i++) {SendPultBuff[(pos++&0x1F)+3] = buff[i];} 
000396  2100              MOVS     r1,#0
000398  2800              CMP      r0,#0
00039a  bfc3              ITTTE    GT                    ;159
00039c  466a              MOVGT    r2,sp                 ;159
00039e  f2400300          MOVWGT   r3,#:LOWER16: ||.data||+48
0003a2  f2c00300          MOVTGT   r3,#:UPPER16: ||.data||+48
;;;164    }
0003a6  b003              ADDLE    sp,sp,#0xc
0003a8  bfd8              IT       LE
0003aa  bd30              POPLE    {r4,r5,pc}
                  |L1.940|
0003ac  f812c001          LDRB     r12,[r2,r1]           ;163
0003b0  f004051f          AND      r5,r4,#0x1f           ;163
0003b4  441d              ADD      r5,r5,r3              ;163
0003b6  1c49              ADDS     r1,r1,#1              ;163
0003b8  1c64              ADDS     r4,r4,#1              ;163
0003ba  f885c003          STRB     r12,[r5,#3]           ;163
0003be  4288              CMP      r0,r1                 ;163
0003c0  dcf4              BGT      |L1.940|
0003c2  b003              ADD      sp,sp,#0xc
0003c4  bd30              POP      {r4,r5,pc}
;;;165    
                          ENDP

                  lcdoutDT3 PROC
;;;181    
;;;182    void  lcdoutDT3(int D, int T, int SS) {
0003c6  b530              PUSH     {r4,r5,lr}
;;;183    int pos = 3;
;;;184    int i;
;;;185    char DayWeek[16] = {' ',' ',0xA8,'H','B','T','C','P',0xAB,'T',0xA8,'T','C',0xA0,'B','C'};		/* Недели по-русски */
0003c8  a348              ADR      r3,|L1.1260|
0003ca  4604              MOV      r4,r0                 ;182
0003cc  e8931029          LDM      r3,{r0,r3,r5,r12}
0003d0  b08b              SUB      sp,sp,#0x2c           ;182
0003d2  f10d0e18          ADD      lr,sp,#0x18
0003d6  e88e1029          STM      lr,{r0,r3,r5,r12}
;;;186    	
;;;187    		SS = ((SS * 1000) >> 8);
0003da  f44f707a          MOV      r0,#0x3e8
0003de  4350              MULS     r0,r2,r0
;;;188    		_snprintf(&SendPultBuff[3],33," : %2.2x/%2.2x/%4.4x   B: %2.2x:%2.2x:%2.2x.%3.3u   ",\
0003e0  f001027f          AND      r2,r1,#0x7f
0003e4  1200              ASRS     r0,r0,#8              ;187
0003e6  f3c12306          UBFX     r3,r1,#8,#7
0003ea  f3c14105          UBFX     r1,r1,#16,#6
0003ee  e9cd2004          STRD     r2,r0,[sp,#0x10]
0003f2  e9cd1302          STRD     r1,r3,[sp,#8]
0003f6  f3c44007          UBFX     r0,r4,#16,#8
0003fa  f4405000          ORR      r0,r0,#0x2000
0003fe  f3c42104          UBFX     r1,r4,#8,#5
000402  e9cd1000          STRD     r1,r0,[sp,#0]
000406  f004033f          AND      r3,r4,#0x3f
00040a  a256              ADR      r2,|L1.1380|
00040c  2121              MOVS     r1,#0x21
00040e  f2400500          MOVW     r5,#:LOWER16: ||.data||+48
000412  f2c00500          MOVT     r5,#:UPPER16: ||.data||+48
000416  1ce8              ADDS     r0,r5,#3
000418  f7fffffe          BL       _snprintf
;;;189    																	D&0x3F,(D>>8)&0x1F,((D>>16)&0xFF)|0x2000,(T>>16)&0x3F,(T>>8)&0x7F,T&0x7F,SS);
;;;190    
;;;191    		SendPultBuff[3] = 0xE0;																																	/* Буква Д */
00041c  20e0              MOVS     r0,#0xe0
00041e  70e8              STRB     r0,[r5,#3]
;;;192    		
;;;193    		i = (D & 0xE000) >> 12;
000420  200e              MOVS     r0,#0xe
000422  ea003014          AND      r0,r0,r4,LSR #12
;;;194    		SendPultBuff[17] = DayWeek[i++];
000426  a906              ADD      r1,sp,#0x18
000428  5c0a              LDRB     r2,[r1,r0]
00042a  1c40              ADDS     r0,r0,#1
00042c  746a              STRB     r2,[r5,#0x11]
;;;195    		SendPultBuff[18] = DayWeek[i];
00042e  5c08              LDRB     r0,[r1,r0]
000430  74a8              STRB     r0,[r5,#0x12]
;;;196    }	
000432  b00b              ADD      sp,sp,#0x2c
000434  bd30              POP      {r4,r5,pc}
;;;197    
                          ENDP

                  SubItem PROC
;;;198    
;;;199    int   SubItem(int Items, int Pos, char *ItemsSTR, int CheckPos) {
000436  e92d4ff0          PUSH     {r4-r11,lr}
00043a  4607              MOV      r7,r0
00043c  4699              MOV      r9,r3
00043e  4616              MOV      r6,r2
000440  460c              MOV      r4,r1
;;;200    int PultKeyb = 0;
;;;201    
;;;202    	WorkPultKeyb = 0;
000442  2000              MOVS     r0,#0
000444  f2400a00          MOVW     r10,#:LOWER16: ||.data||
000448  f2c00a00          MOVT     r10,#:UPPER16: ||.data||
00044c  f10a0854          ADD      r8,r10,#0x54
000450  f1a80524          SUB      r5,r8,#0x24
;;;203    	while (1) {
;;;204    		do {PultKeyb = WaitPultReady();} while (PultKeyb == 0);			/* Ожидаем завершения передачи и получения нажатых кнопок на пульте	*/
;;;205    		lcdout(0,16,ItemsSTR);
;;;206    	
;;;207    		switch (PultKeyb & (0x7F & ~K_Shift)) {
;;;208    			case K_Up:		Pos--; break;
;;;209    			case K_Down:	Pos++; break;
;;;210    			case K_Left:	return 0;
;;;211    			case K_Enter:	return Pos;
;;;212    		} /* switch (PultKeyb & (0x7F & ~K_Shift)) */
;;;213    
;;;214    		if (Pos < 1) 		 Pos = 1;
;;;215    		if (Pos > Items) Pos = Items; 	
;;;216    	
;;;217    		lcdout(16,16,ItemsSTR + (Pos << 4));
;;;218    
;;;219    		if (CheckPos == Pos) SendPultBuff[19] = 0x0E;
000454  f04f0b0e          MOV      r11,#0xe
000458  f8ca0004          STR      r0,[r10,#4]  ; WorkPultKeyb
                  |L1.1116|
00045c  f8da0000          LDR      r0,[r10,#0]  ; PultCount
000460  2824              CMP      r0,#0x24
000462  bfc6              ITTE     GT
000464  f8da0004          LDRGT    r0,[r10,#4]  ; WorkPultKeyb
000468  f0400380          ORRGT    r3,r0,#0x80
00046c  2300              MOVLE    r3,#0
00046e  2b00              CMP      r3,#0
000470  d0f4              BEQ      |L1.1116|
000472  2103              MOVS     r1,#3
000474  f04f0c10          MOV      r12,#0x10             ;205
000478  2000              MOVS     r0,#0                 ;205
                  |L1.1146|
00047a  5c32              LDRB     r2,[r6,r0]            ;205
00047c  f8182002          LDRB     r2,[r8,r2]            ;205
000480  546a              STRB     r2,[r5,r1]            ;205
000482  1c49              ADDS     r1,r1,#1              ;205
000484  2922              CMP      r1,#0x22              ;205
000486  bfdc              ITT      LE                    ;205
000488  1c40              ADDLE    r0,r0,#1              ;205
00048a  4560              CMPLE    r0,r12                ;205
00048c  dbf5              BLT      |L1.1146|
00048e  f003003f          AND      r0,r3,#0x3f           ;207
000492  2802              CMP      r0,#2                 ;207
000494  bf08              IT       EQ                    ;207
000496  1c64              ADDEQ    r4,r4,#1              ;207
000498  d007              BEQ      |L1.1194|
00049a  2803              CMP      r0,#3                 ;207
00049c  d07f              BEQ      |L1.1438|
00049e  2808              CMP      r0,#8                 ;207
0004a0  bf08              IT       EQ                    ;207
0004a2  1e64              SUBEQ    r4,r4,#1              ;207
0004a4  d001              BEQ      |L1.1194|
0004a6  280c              CMP      r0,#0xc               ;207
0004a8  d07c              BEQ      |L1.1444|
                  |L1.1194|
0004aa  2c01              CMP      r4,#1                 ;214
0004ac  bfb8              IT       LT                    ;214
0004ae  2401              MOVLT    r4,#1                 ;214
0004b0  42bc              CMP      r4,r7                 ;215
0004b2  bfc8              IT       GT                    ;215
0004b4  463c              MOVGT    r4,r7                 ;215
0004b6  2310              MOVS     r3,#0x10              ;217
0004b8  2113              MOVS     r1,#0x13              ;217
0004ba  eb061204          ADD      r2,r6,r4,LSL #4       ;217
0004be  2000              MOVS     r0,#0                 ;217
                  |L1.1216|
0004c0  f812c000          LDRB     r12,[r2,r0]           ;217
0004c4  f818c00c          LDRB     r12,[r8,r12]          ;217
0004c8  f805c001          STRB     r12,[r5,r1]           ;217
0004cc  1c49              ADDS     r1,r1,#1              ;217
0004ce  2922              CMP      r1,#0x22              ;217
0004d0  bfdc              ITT      LE                    ;217
0004d2  1c40              ADDLE    r0,r0,#1              ;217
0004d4  4298              CMPLE    r0,r3                 ;217
0004d6  dbf3              BLT      |L1.1216|
0004d8  45a1              CMP      r9,r4
0004da  bf08              IT       EQ
0004dc  f885b013          STRBEQ   r11,[r5,#0x13]
                  |L1.1248|
;;;220    
;;;221    		while (PultRefresh());
0004e0  f7fffffe          BL       PultRefresh
0004e4  2800              CMP      r0,#0
0004e6  d1fb              BNE      |L1.1248|
0004e8  e7b8              B        |L1.1116|
0004ea  e058              B        |L1.1438|
                  |L1.1260|
0004ec  2020a848          DCB      "  ",168,"HBTCP",171,"T",168,"TC",160,"BC"
0004f0  42544350
0004f4  ab54a854
0004f8  43a04243
                  |L1.1276|
0004fc  203a2025          DCB      " : %2.2x/%2.2x/%4.4x   B: %2.2x:%2.2x:%2.2x.%1.1u   ",0
000500  322e3278
000504  2f25322e
000508  32782f25
00050c  342e3478
000510  20202042
000514  3a202532
000518  2e32783a
00051c  25322e32
000520  783a2532
000524  2e32782e
000528  25312e31
00052c  75202020
000530  00      
000531  00                DCB      0
000532  00                DCB      0
000533  00                DCB      0
                  |L1.1332|
000534  252d3130          DCB      "%-10.3f",0
000538  2e336600
                  |L1.1340|
00053c  252d3130          DCB      "%-10.0f",0
000540  2e306600
                  |L1.1348|
000544  252d3130          DCB      "%-10.1f",0
000548  2e316600
                  |L1.1356|
00054c  252d3130          DCB      "%-10.2f",0
000550  2e326600
                  |L1.1364|
000554  3078252e          DCB      "0x%.8X",0
000558  385800  
00055b  00                DCB      0
                  |L1.1372|
00055c  3078252e          DCB      "0x%.4hX",0
000560  34685800
                  |L1.1380|
000564  203a2025          DCB      " : %2.2x/%2.2x/%4.4x   B: %2.2x:%2.2x:%2.2x.%3.3u   ",0
000568  322e3278
00056c  2f25322e
000570  32782f25
000574  342e3478
000578  20202042
00057c  3a202532
000580  2e32783a
000584  25322e32
000588  783a2532
00058c  2e32782e
000590  25332e33
000594  75202020
000598  00      
000599  00                DCB      0
00059a  00                DCB      0
00059b  00                DCB      0
00059c  e002              B        |L1.1444|
                  |L1.1438|
00059e  2000              MOVS     r0,#0                 ;210
;;;222    	} /* while (1) */	
;;;223    }
0005a0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1444|
0005a4  4620              MOV      r0,r4                 ;211
0005a6  e8bd8ff0          POP      {r4-r11,pc}
;;;224    
                          ENDP

                  FillData PROC
;;;225    void  FillData(int Num, float Val, float Min, float Max, float Step, int Pos, int Prec, char *Str, int Flags) {
0005aa  b410              PUSH     {r4}
;;;226    	ChangePrms.Value[Num]   = Val;
0005ac  f2400400          MOVW     r4,#:LOWER16: ||.bss||
0005b0  f2c00400          MOVT     r4,#:UPPER16: ||.bss||
0005b4  eb040080          ADD      r0,r4,r0,LSL #2
0005b8  f8ddc004          LDR      r12,[sp,#4]
0005bc  ed800a00          VSTR     s0,[r0,#0]
;;;227    	ChangePrms.MinVal[Num]  = Min;
0005c0  edc00a08          VSTR     s1,[r0,#0x20]
;;;228    	ChangePrms.MaxVal[Num]	= Max;
0005c4  ed801a10          VSTR     s2,[r0,#0x40]
;;;229    	ChangePrms.StepVal[Num] = Step;
0005c8  edc01a18          VSTR     s3,[r0,#0x60]
;;;230    	ChangePrms.PosVal[Num]  = Pos;
;;;231    	ChangePrms.PrecVal[Num] = Prec;
;;;232    	ChangePrms.StrVal[Num]  = Str;
;;;233    	ChangePrms.Flags[Num]		= Flags;
;;;234    	ChangePrms.Param = ChangePrms.Change = 0;
0005cc  f8c0c0c0          STR      r12,[r0,#0xc0]
0005d0  f8c030e0          STR      r3,[r0,#0xe0]
0005d4  f8c020a0          STR      r2,[r0,#0xa0]
0005d8  f8c01080          STR      r1,[r0,#0x80]
0005dc  2000              MOVS     r0,#0
0005de  f8c40104          STR      r0,[r4,#0x104]  ; ChangePrms
0005e2  f8c40100          STR      r0,[r4,#0x100]  ; ChangePrms
;;;235    }
0005e6  bc10              POP      {r4}
0005e8  4770              BX       lr
;;;236    
                          ENDP

                  GetValue PROC
;;;237    float GetValue(int Num) {
0005ea  f2400100          MOVW     r1,#:LOWER16: ||.bss||
;;;238    	return ChangePrms.Value[Num];
0005ee  f2c00100          MOVT     r1,#:UPPER16: ||.bss||
0005f2  eb010080          ADD      r0,r1,r0,LSL #2
0005f6  ed900a00          VLDR     s0,[r0,#0]
;;;239    }
0005fa  4770              BX       lr
;;;240    
                          ENDP

                  ChangeParam PROC
;;;241    int 	ChangeParam(int Count, char *Header, char *Strs) {
0005fc  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;242    			 int PultKeyb = 0;
;;;243    			 int PultKeybPrev = 0;
000600  f04f0a00          MOV      r10,#0
;;;244    			 int Delay = 0;
000604  4654              MOV      r4,r10
;;;245    			 int RefDelay = 8;
000606  2708              MOVS     r7,#8
;;;246    			 int CountPress = 0;
000608  4655              MOV      r5,r10
;;;247    			 int Delta = 0;
00060a  4656              MOV      r6,r10
;;;248    
;;;249    	WorkPultKeyb = 0;
00060c  f2400900          MOVW     r9,#:LOWER16: ||.data||
000610  f2c00900          MOVT     r9,#:UPPER16: ||.data||
;;;250    	Count--;
000614  f1a00b01          SUB      r11,r0,#1
;;;251    	lcdout(0,16,Header);
000618  460a              MOV      r2,r1
00061a  2110              MOVS     r1,#0x10
00061c  4650              MOV      r0,r10
00061e  f8c9a004          STR      r10,[r9,#4]  ; WorkPultKeyb
000622  f7fffffe          BL       lcdout
000626  f1090854          ADD      r8,r9,#0x54
00062a  f1a80924          SUB      r9,r8,#0x24
                  |L1.1582|
00062e  f2400000          MOVW     r0,#:LOWER16: ||.data||
000632  f2c00000          MOVT     r0,#:UPPER16: ||.data||
000636  6801              LDR      r1,[r0,#0]  ; PultCount
000638  2924              CMP      r1,#0x24
00063a  bfc6              ITTE     GT
00063c  6840              LDRGT    r0,[r0,#4]  ; WorkPultKeyb
00063e  f0400180          ORRGT    r1,r0,#0x80
000642  2100              MOVLE    r1,#0
000644  2900              CMP      r1,#0
000646  d0f2              BEQ      |L1.1582|
;;;252    	
;;;253    	while (1) {
;;;254    		do {PultKeyb  = WaitPultReady();} while (PultKeyb == 0);			/* Ожидаем завершения передачи и получения нажатых кнопок на пульте	*/
;;;255    		if (PultKeyb != PultKeybPrev)	{CountPress = 0; Delay = 0; RefDelay = 8;}
000648  4551              CMP      r1,r10
00064a  d002              BEQ      |L1.1618|
00064c  2500              MOVS     r5,#0
00064e  462c              MOV      r4,r5
000650  2708              MOVS     r7,#8
                  |L1.1618|
;;;256    		PultKeybPrev  = PultKeyb;
;;;257    		
;;;258    		switch (PultKeyb & (0x7F & ~K_Shift)) {
000652  f001003f          AND      r0,r1,#0x3f
000656  468a              MOV      r10,r1                ;256
000658  2804              CMP      r0,#4
00065a  d00c              BEQ      |L1.1654|
00065c  dc06              BGT      |L1.1644|
00065e  2801              CMP      r0,#1
000660  d00e              BEQ      |L1.1664|
000662  2802              CMP      r0,#2
000664  d01a              BEQ      |L1.1692|
000666  2803              CMP      r0,#3
000668  d07e              BEQ      |L1.1896|
00066a  e020              B        |L1.1710|
                  |L1.1644|
00066c  2808              CMP      r0,#8
00066e  d00d              BEQ      |L1.1676|
000670  280c              CMP      r0,#0xc
000672  d07a              BEQ      |L1.1898|
000674  e01b              B        |L1.1710|
                  |L1.1654|
;;;259    			case K_Plus:	{if (Delay==0) {Delta =  1; Delay = RefDelay; CountPress++;}} break;
000676  b9dc              CBNZ     r4,|L1.1712|
000678  2601              MOVS     r6,#1
00067a  463c              MOV      r4,r7
00067c  1c6d              ADDS     r5,r5,#1
00067e  e016              B        |L1.1710|
                  |L1.1664|
;;;260    			case K_Minus:	{if (Delay==0) {Delta = -1; Delay = RefDelay; CountPress++;}} break;
000680  b9b4              CBNZ     r4,|L1.1712|
000682  f04f36ff          MOV      r6,#0xffffffff
000686  463c              MOV      r4,r7
000688  1c6d              ADDS     r5,r5,#1
00068a  e010              B        |L1.1710|
                  |L1.1676|
;;;261    			case K_Up:		ChangePrms.Param--; break;
00068c  f2400000          MOVW     r0,#:LOWER16: ||.bss||
000690  f2c00000          MOVT     r0,#:UPPER16: ||.bss||
000694  f8d02100          LDR      r2,[r0,#0x100]  ; ChangePrms
000698  1e52              SUBS     r2,r2,#1
00069a  e006              B        |L1.1706|
                  |L1.1692|
;;;262    			case K_Down:	ChangePrms.Param++; break;
00069c  f2400000          MOVW     r0,#:LOWER16: ||.bss||
0006a0  f2c00000          MOVT     r0,#:UPPER16: ||.bss||
0006a4  f8d02100          LDR      r2,[r0,#0x100]  ; ChangePrms
0006a8  1c52              ADDS     r2,r2,#1
                  |L1.1706|
0006aa  f8c02100          STR      r2,[r0,#0x100]        ;261  ; ChangePrms
                  |L1.1710|
;;;263    			case K_Left:	return 0;
;;;264    			case K_Enter:	{ChangePrms.Change &= ~(1ul << ChangePrms.Param); return (ChangePrms.Param + 1);} break;
;;;265    		} /* switch (PultKeyb & (0x7F & ~K_Shift)) */
;;;266    
;;;267    		if (Delay) Delay--;
0006ae  b104              CBZ      r4,|L1.1714|
                  |L1.1712|
0006b0  1e64              SUBS     r4,r4,#1
                  |L1.1714|
;;;268    		
;;;269    		if (ChangePrms.Param < 0) 			ChangePrms.Param = 0;
0006b2  f2400200          MOVW     r2,#:LOWER16: ||.bss||
0006b6  f2c00200          MOVT     r2,#:UPPER16: ||.bss||
0006ba  f8d20100          LDR      r0,[r2,#0x100]  ; ChangePrms
0006be  2800              CMP      r0,#0
0006c0  bfbc              ITT      LT
0006c2  2000              MOVLT    r0,#0
0006c4  f8c20100          STRLT    r0,[r2,#0x100]  ; ChangePrms
;;;270    		if (ChangePrms.Param > Count) 	ChangePrms.Param = Count;
0006c8  4558              CMP      r0,r11
0006ca  bfc8              IT       GT
0006cc  f8c2b100          STRGT    r11,[r2,#0x100]  ; ChangePrms
;;;271    
;;;272    		if (CountPress > 9)  {RefDelay = 4;}
0006d0  2d09              CMP      r5,#9
0006d2  bfc8              IT       GT
0006d4  2704              MOVGT    r7,#4
;;;273    		if (CountPress > 29) {RefDelay = 0; CountPress = 51;}
0006d6  2d1d              CMP      r5,#0x1d
0006d8  bfc4              ITT      GT
0006da  2700              MOVGT    r7,#0
0006dc  2533              MOVGT    r5,#0x33
;;;274    
;;;275    		if (PultKeyb & K_Shift) Delta *= 10;
0006de  f01a0f40          TST      r10,#0x40
0006e2  bf1c              ITT      NE
0006e4  eb060086          ADDNE    r0,r6,r6,LSL #2
0006e8  0046              LSLNE    r6,r0,#1
;;;276    		
;;;277    		ChangePrms.Value[ChangePrms.Param] += (Delta * ChangePrms.StepVal[ChangePrms.Param]);
0006ea  f8d20100          LDR      r0,[r2,#0x100]  ; ChangePrms
0006ee  ee006a90          VMOV     s1,r6
0006f2  eb020080          ADD      r0,r2,r0,LSL #2
0006f6  eef80ae0          VCVT.F32.S32 s1,s1
0006fa  ed900a00          VLDR     s0,[r0,#0]
0006fe  ed901a18          VLDR     s2,[r0,#0x60]
000702  ee000a81          VMLA.F32 s0,s1,s2
000706  ed800a00          VSTR     s0,[r0,#0]
;;;278    
;;;279    		if (ChangePrms.Value[ChangePrms.Param] > ChangePrms.MaxVal[ChangePrms.Param]) {ChangePrms.Value[ChangePrms.Param] = ChangePrms.MaxVal[ChangePrms.Param];}
00070a  f8d20100          LDR      r0,[r2,#0x100]  ; ChangePrms
00070e  eb020080          ADD      r0,r2,r0,LSL #2
000712  edd00a10          VLDR     s1,[r0,#0x40]
000716  eeb40ae0          VCMPE.F32 s0,s1
00071a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00071e  bfc8              IT       GT
000720  edc00a00          VSTRGT   s1,[r0,#0]
;;;280    		if (ChangePrms.Value[ChangePrms.Param] < ChangePrms.MinVal[ChangePrms.Param]) {ChangePrms.Value[ChangePrms.Param] = ChangePrms.MinVal[ChangePrms.Param];}		
000724  f8d20100          LDR      r0,[r2,#0x100]  ; ChangePrms
000728  eb020080          ADD      r0,r2,r0,LSL #2
00072c  edd00a00          VLDR     s1,[r0,#0]
000730  ed900a08          VLDR     s0,[r0,#0x20]
000734  eef40ac0          VCMPE.F32 s1,s0
000738  eef1fa10          VMRS     APSR_nzcv,FPSCR
00073c  bf38              IT       CC
00073e  ed800a00          VSTRCC   s0,[r0,#0]
;;;281    	
;;;282    		lcdout(16,16,Strs + (ChangePrms.Param << 4));
000742  f04f0c10          MOV      r12,#0x10
000746  f2400000          MOVW     r0,#:LOWER16: ||.bss||
00074a  f2c00000          MOVT     r0,#:UPPER16: ||.bss||
00074e  f8d0e100          LDR      lr,[r0,#0x100]  ; ChangePrms
000752  9802              LDR      r0,[sp,#8]
000754  2113              MOVS     r1,#0x13
000756  eb00130e          ADD      r3,r0,lr,LSL #4
00075a  2000              MOVS     r0,#0
                  |L1.1884|
00075c  5c1a              LDRB     r2,[r3,r0]
00075e  f8182002          LDRB     r2,[r8,r2]
000762  f8092001          STRB     r2,[r9,r1]
000766  e001              B        |L1.1900|
                  |L1.1896|
000768  e029              B        |L1.1982|
                  |L1.1898|
00076a  e02c              B        |L1.1990|
                  |L1.1900|
00076c  1c49              ADDS     r1,r1,#1
00076e  2922              CMP      r1,#0x22
000770  bfdc              ITT      LE
000772  1c40              ADDLE    r0,r0,#1
000774  4560              CMPLE    r0,r12
000776  dbf1              BLT      |L1.1884|
;;;283    		
;;;284    		if ((ChangePrms.Flags[ChangePrms.Param] & TiFlag) && (ChangePrms.Value[ChangePrms.Param] == 0)) {lcdout(22,7," ОТКЛ. ");} else	
000778  f2400000          MOVW     r0,#:LOWER16: ||.bss||
00077c  f2c00000          MOVT     r0,#:UPPER16: ||.bss||
000780  eb00008e          ADD      r0,r0,lr,LSL #2
000784  f89010c0          LDRB     r1,[r0,#0xc0]
000788  f0110f01          TST      r1,#1
00078c  d02b              BEQ      |L1.2022|
00078e  ed900a00          VLDR     s0,[r0,#0]
000792  eeb50ac0          VCMPE.F32 s0,#0.0
000796  eef1fa10          VMRS     APSR_nzcv,FPSCR
00079a  d124              BNE      |L1.2022|
00079c  2307              MOVS     r3,#7
00079e  2119              MOVS     r1,#0x19
0007a0  a250              ADR      r2,|L1.2276|
0007a2  2000              MOVS     r0,#0
                  |L1.1956|
0007a4  f812c000          LDRB     r12,[r2,r0]
0007a8  f818c00c          LDRB     r12,[r8,r12]
0007ac  f809c001          STRB     r12,[r9,r1]
0007b0  1c49              ADDS     r1,r1,#1
0007b2  2922              CMP      r1,#0x22
0007b4  bfdc              ITT      LE
0007b6  1c40              ADDLE    r0,r0,#1
0007b8  4298              CMPLE    r0,r3
0007ba  dbf3              BLT      |L1.1956|
0007bc  e01d              B        |L1.2042|
                  |L1.1982|
;;;285    			lcdouttextl(ChangePrms.PosVal[ChangePrms.Param],ChangePrms.Value[ChangePrms.Param],ChangePrms.PrecVal[ChangePrms.Param],ChangePrms.StrVal[ChangePrms.Param]);
;;;286    
;;;287    		if (Delta) {ChangePrms.Change |= (1ul << ChangePrms.Param);}
;;;288        if (ChangePrms.Change & (1ul << ChangePrms.Param)) {lcdout(31,1,"*");}
;;;289    		Delta = 0;		
;;;290    		
;;;291    		while (PultRefresh());
;;;292    	} /* while (1) */	
;;;293    }//changeparam	
0007be  b003              ADD      sp,sp,#0xc
0007c0  2000              MOVS     r0,#0                 ;263
0007c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1990|
0007c6  f2400100          MOVW     r1,#:LOWER16: ||.bss||;264
0007ca  f2c00100          MOVT     r1,#:UPPER16: ||.bss||;264
0007ce  e9d10340          LDRD     r0,r3,[r1,#0x100]     ;264
0007d2  2201              MOVS     r2,#1                 ;264
0007d4  4082              LSLS     r2,r2,r0              ;264
0007d6  ea230202          BIC      r2,r3,r2              ;264
0007da  f8c12104          STR      r2,[r1,#0x104]        ;264  ; ChangePrms
0007de  b003              ADD      sp,sp,#0xc
0007e0  1c40              ADDS     r0,r0,#1              ;264
0007e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2022|
0007e6  f8d020e0          LDR      r2,[r0,#0xe0]         ;285
0007ea  f8d010a0          LDR      r1,[r0,#0xa0]         ;285
0007ee  ed900a00          VLDR     s0,[r0,#0]            ;285
0007f2  f8d00080          LDR      r0,[r0,#0x80]         ;285
0007f6  f7fffffe          BL       lcdouttextl
                  |L1.2042|
0007fa  b166              CBZ      r6,|L1.2070|
0007fc  f2400000          MOVW     r0,#:LOWER16: ||.bss||;287
000800  f2c00000          MOVT     r0,#:UPPER16: ||.bss||;287
000804  f8903100          LDRB     r3,[r0,#0x100]        ;287  ; ChangePrms
000808  2101              MOVS     r1,#1                 ;287
00080a  f8d02104          LDR      r2,[r0,#0x104]        ;287  ; ChangePrms
00080e  4099              LSLS     r1,r1,r3              ;287
000810  4311              ORRS     r1,r1,r2              ;287
000812  f8c01104          STR      r1,[r0,#0x104]        ;287  ; ChangePrms
                  |L1.2070|
000816  f2400000          MOVW     r0,#:LOWER16: ||.bss||;288
00081a  f2c00000          MOVT     r0,#:UPPER16: ||.bss||;288
00081e  f8902100          LDRB     r2,[r0,#0x100]        ;288  ; ChangePrms
000822  f8d01104          LDR      r1,[r0,#0x104]        ;288  ; ChangePrms
000826  2001              MOVS     r0,#1                 ;288
000828  4090              LSLS     r0,r0,r2              ;288
00082a  4201              TST      r1,r0                 ;288
00082c  d00f              BEQ      |L1.2126|
00082e  2301              MOVS     r3,#1                 ;288
000830  2122              MOVS     r1,#0x22              ;288
000832  a22e              ADR      r2,|L1.2284|
000834  2000              MOVS     r0,#0                 ;288
                  |L1.2102|
000836  f812c000          LDRB     r12,[r2,r0]           ;288
00083a  f818c00c          LDRB     r12,[r8,r12]          ;288
00083e  f809c001          STRB     r12,[r9,r1]           ;288
000842  1c49              ADDS     r1,r1,#1              ;288
000844  2922              CMP      r1,#0x22              ;288
000846  bfdc              ITT      LE                    ;288
000848  1c40              ADDLE    r0,r0,#1              ;288
00084a  4298              CMPLE    r0,r3                 ;288
00084c  dbf3              BLT      |L1.2102|
                  |L1.2126|
00084e  2600              MOVS     r6,#0                 ;289
                  |L1.2128|
000850  f7fffffe          BL       PultRefresh
000854  2800              CMP      r0,#0                 ;291
000856  d1fb              BNE      |L1.2128|
000858  e6e9              B        |L1.1582|
;;;294    	
                          ENDP

                  SubMenuAsk PROC
;;;305    
;;;306    int   SubMenuAsk(char *request) {
00085a  e92d41f0          PUSH     {r4-r8,lr}
00085e  4604              MOV      r4,r0
;;;307    int PultKeyb = 0;
;;;308    
;;;309    	WorkPultKeyb = 0;
000860  2000              MOVS     r0,#0
000862  f2400500          MOVW     r5,#:LOWER16: ||.data||
000866  f2c00500          MOVT     r5,#:UPPER16: ||.data||
00086a  f1050654          ADD      r6,r5,#0x54
00086e  f1050730          ADD      r7,r5,#0x30
000872  6068              STR      r0,[r5,#4]  ; WorkPultKeyb
                  |L1.2164|
000874  6828              LDR      r0,[r5,#0]  ; PultCount
000876  2824              CMP      r0,#0x24
000878  bfc6              ITTE     GT
00087a  6868              LDRGT    r0,[r5,#4]  ; WorkPultKeyb
00087c  f0400380          ORRGT    r3,r0,#0x80
000880  2300              MOVLE    r3,#0
000882  2b00              CMP      r3,#0
000884  d0f6              BEQ      |L1.2164|
000886  2203              MOVS     r2,#3
;;;310    	while (1) {
;;;311    		do {PultKeyb = WaitPultReady();} while (PultKeyb == 0);			/* Ожидаем завершения передачи и получения нажатых кнопок на пульте	*/
;;;312    		lcdout( 0,16,request);
000888  f04f0c10          MOV      r12,#0x10
00088c  2100              MOVS     r1,#0
                  |L1.2190|
00088e  5c60              LDRB     r0,[r4,r1]
000890  5c30              LDRB     r0,[r6,r0]
000892  54b8              STRB     r0,[r7,r2]
000894  1c52              ADDS     r2,r2,#1
000896  2a22              CMP      r2,#0x22
000898  bfdc              ITT      LE
00089a  1c49              ADDLE    r1,r1,#1
00089c  4561              CMPLE    r1,r12
00089e  dbf6              BLT      |L1.2190|
0008a0  2213              MOVS     r2,#0x13
;;;313    		lcdout(16,16," [|]-Да [«]-Нет ");
0008a2  f04f0c10          MOV      r12,#0x10
0008a6  a012              ADR      r0,|L1.2288|
0008a8  2100              MOVS     r1,#0
                  |L1.2218|
0008aa  f8108001          LDRB     r8,[r0,r1]
0008ae  f8168008          LDRB     r8,[r6,r8]
0008b2  f8078002          STRB     r8,[r7,r2]
0008b6  1c52              ADDS     r2,r2,#1
0008b8  2a22              CMP      r2,#0x22
0008ba  bfdc              ITT      LE
0008bc  1c49              ADDLE    r1,r1,#1
0008be  4561              CMPLE    r1,r12
0008c0  dbf3              BLT      |L1.2218|
;;;314    	
;;;315    		switch (PultKeyb & (0x7F & ~K_Shift)) {
0008c2  f003003f          AND      r0,r3,#0x3f
0008c6  2803              CMP      r0,#3
0008c8  d006              BEQ      |L1.2264|
0008ca  280c              CMP      r0,#0xc
0008cc  d007              BEQ      |L1.2270|
                  |L1.2254|
;;;316    			case K_Left:	return 0;
;;;317    			case K_Enter:	return 1;
;;;318    		} /* switch (PultKeyb & (0x7F & ~K_Shift)) */
;;;319    
;;;320    		while (PultRefresh());
0008ce  f7fffffe          BL       PultRefresh
0008d2  2800              CMP      r0,#0
0008d4  d1fb              BNE      |L1.2254|
0008d6  e7cd              B        |L1.2164|
                  |L1.2264|
0008d8  2000              MOVS     r0,#0                 ;316
;;;321    	} /* while (1) */		
;;;322    }//SubMenuAsk
0008da  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2270|
0008de  2001              MOVS     r0,#1                 ;317
0008e0  e8bd81f0          POP      {r4-r8,pc}
;;;323    
                          ENDP

                  |L1.2276|
0008e4  20ced2ca          DCB      " ",206,210,202,203,". ",0
0008e8  cb2e2000
                  |L1.2284|
0008ec  2a00              DCB      "*",0
0008ee  00                DCB      0
0008ef  00                DCB      0
                  |L1.2288|
0008f0  205b7c5d          DCB      " [|]-",196,224," [",171,"]-",205,229,242," ",0
0008f4  2dc4e020
0008f8  5bab5d2d
0008fc  cde5f220
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ChangePrms
                          %        264

                          AREA ||.data||, DATA, ALIGN=2

                  PultCount
                          DCD      0x00000000
                  WorkPultKeyb
                          DCD      0x00000000
                  Leds
                          DCD      0x0000003f
                  WorkPultBuff
00000c  7fc0ff22          DCB      0x7f,0xc0,0xff,0x22
000010  454e4552          DCB      0x45,0x4e,0x45,0x52
000014  474f4b4f          DCB      0x47,0x4f,0x4b,0x4f
000018  4d504c45          DCB      0x4d,0x50,0x4c,0x45
00001c  4b542245          DCB      0x4b,0x54,0x22,0x45
000020  4b2d5050          DCB      0x4b,0x2d,0x50,0x50
000024  2d303231          DCB      0x2d,0x30,0x32,0x31
000028  352d3132          DCB      0x35,0x2d,0x31,0x32
00002c  2d787800          DCB      0x2d,0x78,0x78,0x00
                  SendPultBuff
000030  7fc0ff22          DCB      0x7f,0xc0,0xff,0x22
000034  454e4552          DCB      0x45,0x4e,0x45,0x52
000038  474f4b4f          DCB      0x47,0x4f,0x4b,0x4f
00003c  4d504c45          DCB      0x4d,0x50,0x4c,0x45
000040  4b542245          DCB      0x4b,0x54,0x22,0x45
000044  4b2d5050          DCB      0x4b,0x2d,0x50,0x50
000048  2d303231          DCB      0x2d,0x30,0x32,0x31
00004c  352d3132          DCB      0x35,0x2d,0x31,0x32
000050  2d787800          DCB      0x2d,0x78,0x78,0x00
                  TableRusLCD
000054  20202020          DCB      0x20,0x20,0x20,0x20
000058  20202020          DCB      0x20,0x20,0x20,0x20
00005c  20202020          DCB      0x20,0x20,0x20,0x20
000060  20202020          DCB      0x20,0x20,0x20,0x20
000064  20202020          DCB      0x20,0x20,0x20,0x20
000068  20202020          DCB      0x20,0x20,0x20,0x20
00006c  20202020          DCB      0x20,0x20,0x20,0x20
000070  20202020          DCB      0x20,0x20,0x20,0x20
000074  20212223          DCB      0x20,0x21,0x22,0x23
000078  24252627          DCB      0x24,0x25,0x26,0x27
00007c  28292a2b          DCB      0x28,0x29,0x2a,0x2b
000080  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
000084  30313233          DCB      0x30,0x31,0x32,0x33
000088  34353637          DCB      0x34,0x35,0x36,0x37
00008c  38393a3b          DCB      0x38,0x39,0x3a,0x3b
000090  3c3d3e3f          DCB      0x3c,0x3d,0x3e,0x3f
000094  40414243          DCB      0x40,0x41,0x42,0x43
000098  44454647          DCB      0x44,0x45,0x46,0x47
00009c  48494a4b          DCB      0x48,0x49,0x4a,0x4b
0000a0  4c4d4e4f          DCB      0x4c,0x4d,0x4e,0x4f
0000a4  50515253          DCB      0x50,0x51,0x52,0x53
0000a8  54555657          DCB      0x54,0x55,0x56,0x57
0000ac  58595a5b          DCB      0x58,0x59,0x5a,0x5b
0000b0  5c5d5e5f          DCB      0x5c,0x5d,0x5e,0x5f
0000b4  0e616263          DCB      0x0e,0x61,0x62,0x63
0000b8  64656667          DCB      0x64,0x65,0x66,0x67
0000bc  68696a6b          DCB      0x68,0x69,0x6a,0x6b
0000c0  6c6d6e6f          DCB      0x6c,0x6d,0x6e,0x6f
0000c4  70717273          DCB      0x70,0x71,0x72,0x73
0000c8  74757677          DCB      0x74,0x75,0x76,0x77
0000cc  78797ad9          DCB      0x78,0x79,0x7a,0xd9
0000d0  08da0d0e          DCB      0x08,0xda,0x0d,0x0e
0000d4  20202020          DCB      0x20,0x20,0x20,0x20
0000d8  20202020          DCB      0x20,0x20,0x20,0x20
0000dc  20202020          DCB      0x20,0x20,0x20,0x20
0000e0  20202020          DCB      0x20,0x20,0x20,0x20
0000e4  20202020          DCB      0x20,0x20,0x20,0x20
0000e8  20202020          DCB      0x20,0x20,0x20,0x20
0000ec  20202020          DCB      0x20,0x20,0x20,0x20
0000f0  20202020          DCB      0x20,0x20,0x20,0x20
0000f4  20202020          DCB      0x20,0x20,0x20,0x20
0000f8  2020090e          DCB      0x20,0x20,0x09,0x0e
0000fc  a220200b          DCB      0xa2,0x20,0x20,0x0b
000100  20202020          DCB      0x20,0x20,0x20,0x20
000104  ef202020          DCB      0xef,0x20,0x20,0x20
000108  20202020          DCB      0x20,0x20,0x20,0x20
00010c  b509200c          DCB      0xb5,0x09,0x20,0x0c
000110  20202020          DCB      0x20,0x20,0x20,0x20
000114  41a042a1          DCB      0x41,0xa0,0x42,0xa1
000118  e045a3a4          DCB      0xe0,0x45,0xa3,0xa4
00011c  a5a64ba7          DCB      0xa5,0xa6,0x4b,0xa7
000120  4d484fa8          DCB      0x4d,0x48,0x4f,0xa8
000124  504354a9          DCB      0x50,0x43,0x54,0xa9
000128  aa58e1ab          DCB      0xaa,0x58,0xe1,0xab
00012c  ace2adae          DCB      0xac,0xe2,0xad,0xae
000130  62afb0b1          DCB      0x62,0xaf,0xb0,0xb1
000134  61b2b3b4          DCB      0x61,0xb2,0xb3,0xb4
000138  e365b6b7          DCB      0xe3,0x65,0xb6,0xb7
00013c  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
000140  bcbd6fbe          DCB      0xbc,0xbd,0x6f,0xbe
000144  7063bf79          DCB      0x70,0x63,0xbf,0x79
000148  e478e5c0          DCB      0xe4,0x78,0xe5,0xc0
00014c  c1e6c2c3          DCB      0xc1,0xe6,0xc2,0xc3
000150  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7

;*** Start embedded assembler ***

#line 1 "PERIPH\\pult.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pult_c_2e743f11____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___6_pult_c_2e743f11____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pult_c_2e743f11____REVSH|
#line 144
|__asm___6_pult_c_2e743f11____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
