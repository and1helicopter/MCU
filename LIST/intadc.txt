; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\intadc.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\intadc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\intadc.crf PERIPH\IntADC.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  InitIntADC PROC
;;;58     
;;;59     void InitIntADC() {
000000  f6430004          MOV      r0,#0x3804
;;;60     	
;;;61       SYSCFG->PMC		|= (SYSCFG_PMC_ADC1DC2);
000004  f2c40001          MOVT     r0,#0x4001
000008  6801              LDR      r1,[r0,#0]
00000a  f4413180          ORR      r1,r1,#0x10000
00000e  6001              STR      r1,[r0,#0]
;;;62     
;;;63     	/*Clock Enable for ADC1 & ADC2*/
;;;64     	RCC->APB2ENR	|= (RCC_APB2ENR_ADC1EN | RCC_APB2ENR_ADC2EN);
000010  f6430044          MOV      r0,#0x3844
000014  f2c40002          MOVT     r0,#0x4002
000018  6801              LDR      r1,[r0,#0]
00001a  f4417140          ORR      r1,r1,#0x300
00001e  6001              STR      r1,[r0,#0]
;;;65     
;;;66     	ADC->CCR		=	 0x06   			 |				/*Dual ADC Regular simultaneous mode only	*/
000020  f44f5000          MOV      r0,#0x2000
000024  f24a0106          MOV      r1,#0xa006
000028  f2c40001          MOVT     r0,#0x4001
00002c  f2c00101          MOVT     r1,#1
000030  f8c01304          STR      r1,[r0,#0x304]
;;;67     								(0x02ul << 14) |				/*DMA mode 2 enabled											*/
;;;68     	  						 ADC_CCR_DDS	 |				/*DMA not stop														*/
;;;69     								(0x01ul	<< 16) ;				/*ADCCLK = APB2CLK / 4 = 21 MHz						*/
;;;70     	
;;;71     	ADC1->CR1		= ADC_CR1_SCAN;
000034  1581              ASRS     r1,r0,#22
000036  6041              STR      r1,[r0,#4]
;;;72     	ADC2->CR1		= ADC_CR1_SCAN;
000038  f8c01104          STR      r1,[r0,#0x104]
;;;73     	
;;;74     	ADC1->CR2		= ADC_CR2_ADON | (ADC_trig << 24) | (ADC_trig_edge << 28);// | ADC_CR2_ALIGN;
00003c  2101              MOVS     r1,#1
00003e  f6c10100          MOVT     r1,#0x1800
000042  6081              STR      r1,[r0,#8]
;;;75     
;;;76     	ADC2->CR2		= ADC_CR2_ADON;// | ADC_CR2_ALIGN;
000044  2101              MOVS     r1,#1
000046  f8c01108          STR      r1,[r0,#0x108]
;;;77     	
;;;78     	/* Время преобразования для обоих АЦП, одинаковое для всех каналов									*/
;;;79     	ADC1->SMPR1	= 												(ADC_Sample_Time << 24)|(ADC_Sample_Time << 21)|(ADC_Sample_Time << 18)|(ADC_Sample_Time << 15)|
00004a  f24b62db          MOV      r2,#0xb6db
00004e  f2c0326d          MOVT     r2,#0x36d
000052  60c2              STR      r2,[r0,#0xc]
;;;80     								(ADC_Sample_Time << 12)|(ADC_Sample_Time <<  9)|(ADC_Sample_Time <<  6)|(ADC_Sample_Time <<  3)|(ADC_Sample_Time << 0);
;;;81     
;;;82     	ADC1->SMPR2	= (ADC_Sample_Time << 27)|(ADC_Sample_Time << 24)|(ADC_Sample_Time << 21)|(ADC_Sample_Time << 18)|(ADC_Sample_Time << 15)|
000054  f24b61db          MOV      r1,#0xb6db
000058  f6c1316d          MOVT     r1,#0x1b6d
00005c  6101              STR      r1,[r0,#0x10]
;;;83     								(ADC_Sample_Time << 12)|(ADC_Sample_Time <<  9)|(ADC_Sample_Time <<  6)|(ADC_Sample_Time <<  3)|(ADC_Sample_Time << 0);
;;;84     	
;;;85     	ADC2->SMPR1	= 												(ADC_Sample_Time << 24)|(ADC_Sample_Time << 21)|(ADC_Sample_Time << 18)|(ADC_Sample_Time << 15)|
00005e  f8c0210c          STR      r2,[r0,#0x10c]
;;;86     								(ADC_Sample_Time << 12)|(ADC_Sample_Time <<  9)|(ADC_Sample_Time <<  6)|(ADC_Sample_Time <<  3)|(ADC_Sample_Time << 0);
;;;87     	
;;;88     	ADC2->SMPR2	= (ADC_Sample_Time << 27)|(ADC_Sample_Time << 24)|(ADC_Sample_Time << 21)|(ADC_Sample_Time << 18)|(ADC_Sample_Time << 15)|
000062  f8c01110          STR      r1,[r0,#0x110]
;;;89     								(ADC_Sample_Time << 12)|(ADC_Sample_Time <<  9)|(ADC_Sample_Time <<  6)|(ADC_Sample_Time <<  3)|(ADC_Sample_Time << 0);
;;;90     	
;;;91     	
;;;92     	/*Выбор каналов*/
;;;93     	ADC1->SQR1	= ((N_SQ - 1) << 20);
000066  f44f1180          MOV      r1,#0x100000
00006a  62c1              STR      r1,[r0,#0x2c]
;;;94     	ADC2->SQR1	= ((N_SQ - 1) << 20);
00006c  f8c0112c          STR      r1,[r0,#0x12c]
;;;95     	
;;;96     	ADC1->SQR3	= (ADC1_SQ3 << 10) | (ADC1_SQ2 << 5) | (ADC1_SQ1);
000070  f24141a3          MOV      r1,#0x14a3
000074  6341              STR      r1,[r0,#0x34]
;;;97     	ADC2->SQR3	= (ADC2_SQ3 << 10) | (ADC2_SQ2 << 5) | (ADC2_SQ1);
000076  f64141e4          MOV      r1,#0x1ce4
00007a  f8c01134          STR      r1,[r0,#0x134]
;;;98     
;;;99     	/*Настройка DMA*/
;;;100    	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;													/* DMA2 Clock enable									*/
00007e  f6430030          MOV      r0,#0x3830
000082  f2c40002          MOVT     r0,#0x4002
000086  6801              LDR      r1,[r0,#0]
000088  f4410180          ORR      r1,r1,#0x400000
00008c  6001              STR      r1,[r0,#0]
;;;101    
;;;102    	/* ADC DMA Configuration	-----------------------------------------------------------------------	*/
;;;103    	DMA2->HIFCR				 	= (0x3Dul << 0);												/* Clear DMA interrupr status bits		*/
00008e  f246410c          MOV      r1,#0x640c
000092  f2c40102          MOVT     r1,#0x4002
000096  203d              MOVS     r0,#0x3d
000098  6008              STR      r0,[r1,#0]
;;;104    	DMA2_Stream4->PAR 	= (unsigned int)&(ADC->CDR);
00009a  f2464178          MOV      r1,#0x6478
00009e  f2423008          MOV      r0,#0x2308
0000a2  f2c40102          MOVT     r1,#0x4002
0000a6  f2c40001          MOVT     r0,#0x4001
0000aa  6008              STR      r0,[r1,#0]
;;;105    	DMA2_Stream4->M0AR 	= (unsigned int)StdPrms.IntADCData;
0000ac  f2400000          MOVW     r0,#:LOWER16: Metro+736
0000b0  f2c00000          MOVT     r0,#:UPPER16: Metro+736
0000b4  1d09              ADDS     r1,r1,#4
0000b6  6008              STR      r0,[r1,#0]
;;;106    	DMA2_Stream4->NDTR 	= N_SQ * ADCxCycle;
0000b8  f2464174          MOV      r1,#0x6474
0000bc  f2c40102          MOVT     r1,#0x4002
0000c0  2010              MOVS     r0,#0x10
0000c2  6008              STR      r0,[r1,#0]
;;;107    	DMA2_Stream4->CR	 	= (0ul << 25) 	|												/* Channel #0													*/
0000c4  f2455011          MOV      r0,#0x5511
0000c8  1f09              SUBS     r1,r1,#4
0000ca  f2c00003          MOVT     r0,#3
0000ce  6008              STR      r0,[r1,#0]
0000d0  f24e013c          MOV      r1,#0xe03c
0000d4  f2ce0100          MOVT     r1,#0xe000
0000d8  2030              MOVS     r0,#0x30
0000da  f8810400          STRB     r0,[r1,#0x400]
0000de  f24e0104          MOV      r1,#0xe004
0000e2  f2ce0100          MOVT     r1,#0xe000
0000e6  f04f5080          MOV      r0,#0x10000000
0000ea  f8c10100          STR      r0,[r1,#0x100]
;;;108    												(0ul<< 6)			|												/* Data transfer direction P-to-M			*/
;;;109    												DMA_SxCR_CIRC	|												/* Circular mode											*/
;;;110    												DMA_SxCR_MINC	|												/* Memory increment mode							*/
;;;111    												DMA_SxCR_TCIE	|												/* Transmit complete interrupe				*/
;;;112    												DMA_SxCR_PSIZE_32	|										/* Peripheral data size-word (32 bit) */
;;;113    												DMA_SxCR_MSIZE_32	|										/* Memory data size-word (32 bit)			*/
;;;114    												DMA_SxCR_PL_VeryHI|										/* Priority level - very high					*/
;;;115    												DMA_SxCR_EN;													/* Channel enable											*/
;;;116    
;;;117    	NVIC_SetPriority(DMA2_Stream4_IRQn, DMA2_Stream4_Prty);
;;;118    	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
;;;119    }
0000ee  4770              BX       lr
;;;120    
                          ENDP


;*** Start embedded assembler ***

#line 1 "PERIPH\\IntADC.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_IntADC_c_2297891d____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___8_IntADC_c_2297891d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_IntADC_c_2297891d____REVSH|
#line 144
|__asm___8_IntADC_c_2297891d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
