; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\stdfunc.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\stdfunc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\stdfunc.crf SOURCE\StdFunc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  FiltDigIn PROC
;;;3      
;;;4      short FiltDigIn(unsigned int NewCurrDigIn, unsigned short *PrevDigIn, unsigned char *Counters, unsigned char RefDigIn) {
000000  e92d03f0          PUSH     {r4-r9}
;;;5      unsigned short SameDigIn;
;;;6      unsigned  char TempCount;
;;;7      unsigned 	 int NewMask = 0;	
;;;8      					 int i;
;;;9      
;;;10     	SameDigIn	= ~((NewCurrDigIn >> 16) ^ *PrevDigIn);											/* Маска входов не изменивших состояние	*/
000004  f8b1c000          LDRH     r12,[r1,#0]
000008  2500              MOVS     r5,#0                 ;7
00000a  ea8c4c10          EOR      r12,r12,r0,LSR #16
00000e  ea6f0c0c          MVN      r12,r12
000012  fa1ff88c          UXTH     r8,r12
;;;11     	
;;;12     	for (i=15; i>=0; i--) {
000016  f04f0c0f          MOV      r12,#0xf
;;;13     		TempCount = Counters[i];
;;;14     		if (SameDigIn & (1ul << i)) {TempCount = __UQADD8(TempCount,1);} else {TempCount = 0;}
00001a  2701              MOVS     r7,#1
                  |L1.28|
00001c  f812400c          LDRB     r4,[r2,r12]           ;13
000020  fa07f60c          LSL      r6,r7,r12
000024  ea160f08          TST      r6,r8
000028  bf1a              ITTE     NE
00002a  fa84f457          UQADD8NE r4,r4,r7
00002e  b2e4              UXTBNE   r4,r4
000030  2400              MOVEQ    r4,#0
;;;15     		Counters[i] = TempCount;
000032  f802400c          STRB     r4,[r2,r12]
;;;16     		if (TempCount == RefDigIn)  { NewMask |= (1ul << i);}
000036  429c              CMP      r4,r3
000038  bf08              IT       EQ
00003a  4335              ORREQ    r5,r5,r6
00003c  f1bc0c01          SUBS     r12,r12,#1
000040  d5ec              BPL      |L1.28|
;;;17     	}
;;;18     
;;;19     	NewCurrDigIn &= ~NewMask;																						/* Сбрасываем изменяемый бит 	*/
000042  43a8              BICS     r0,r0,r5
;;;20     	NewCurrDigIn |= ((NewCurrDigIn >> 16) & NewMask);										/* Устанавливаем бит					*/
000044  ea054210          AND      r2,r5,r0,LSR #16
000048  4310              ORRS     r0,r0,r2
;;;21     		
;;;22     	*PrevDigIn = (NewCurrDigIn >> 16);
00004a  0c02              LSRS     r2,r0,#16
00004c  800a              STRH     r2,[r1,#0]
;;;23     	return NewCurrDigIn;
;;;24     }
00004e  e8bd03f0          POP      {r4-r9}
000052  b200              SXTH     r0,r0                 ;23
000054  4770              BX       lr
;;;25     
                          ENDP

                  SetZeroChs PROC
;;;26     
;;;27     void SetZeroChs(unsigned int *SetZeroCmnd) {
000056  e92d03f0          PUSH     {r4-r9}
;;;28     static unsigned int ChsToZero = 0;
;;;29     static unsigned int CurrCh = 0;
;;;30     static int FiltCount = 0;
;;;31     static int Buffer = 0;
;;;32     			 int Value;
;;;33     			 int i;
;;;34     
;;;35     	if (FiltCount) {
00005a  f2400300          MOVW     r3,#:LOWER16: ||.data||
00005e  f2c00300          MOVT     r3,#:UPPER16: ||.data||
000062  689e              LDR      r6,[r3,#8]  ; FiltCount
000064  2500              MOVS     r5,#0
;;;36     			if (CurrCh > 15) {Value = AP_REG(StdPrms.IntADCData[CurrCh - 16] << 3, 656, &Buffer);}
;;;37     				else 	{Value = AP_REG(StdPrms.ExtADCData[CurrCh], 656, &Buffer);}  
;;;38     			if (--FiltCount == 0)	{
;;;39     				SavePrms.ADCOffs[CurrCh] = Value;
;;;40     				if (ChsToZero) {
;;;41     					FiltCount = 1000; 
;;;42     					Buffer = 0;
;;;43     					/* Ищем следующий канал для установки 0			*/
;;;44     					i = CurrCh + 1;
;;;45     					while ((ChsToZero & (1ul << i)) == 0) {i++;}
000066  2201              MOVS     r2,#1
000068  f44f7c7a          MOV      r12,#0x3e8            ;41
00006c  2e00              CMP      r6,#0                 ;35
00006e  d045              BEQ      |L1.252|
000070  f103090c          ADD      r9,r3,#0xc            ;27
000074  f2400000          MOVW     r0,#:LOWER16: Metro
000078  f2c00000          MOVT     r0,#:UPPER16: Metro
00007c  685c              LDR      r4,[r3,#4]            ;36  ; CurrCh
00007e  eb000144          ADD      r1,r0,r4,LSL #1       ;36
000082  f8d90000          LDR      r0,[r9,#0]            ;36
000086  2c0f              CMP      r4,#0xf               ;36
000088  d90e              BLS      |L1.168|
00008a  f8b172c0          LDRH     r7,[r1,#0x2c0]        ;36
00008e  00ff              LSLS     r7,r7,#3              ;36
000090  fa0ff887          SXTH     r8,r7                 ;36
000094  f44f7724          MOV      r7,#0x290             ;36
000098  eba84820          SUB      r8,r8,r0,ASR #16      ;36
00009c  fb080007          MLA      r0,r8,r7,r0           ;36
0000a0  f8c90000          STR      r0,[r9,#0]            ;36
0000a4  1400              ASRS     r0,r0,#16             ;36
0000a6  e00a              B        |L1.190|
                  |L1.168|
0000a8  f9b182c0          LDRSH    r8,[r1,#0x2c0]        ;37
0000ac  f44f7724          MOV      r7,#0x290             ;37
0000b0  eba84820          SUB      r8,r8,r0,ASR #16      ;37
0000b4  fb080007          MLA      r0,r8,r7,r0           ;37
0000b8  f8c90000          STR      r0,[r9,#0]            ;37
0000bc  1400              ASRS     r0,r0,#16             ;37
                  |L1.190|
0000be  1e76              SUBS     r6,r6,#1              ;37
0000c0  609e              STR      r6,[r3,#8]            ;38  ; FiltCount
;;;46     					/* Сбрасываем в маске текущий канал					*/
;;;47     					ChsToZero &= ~(1ul << i);
;;;48     					CurrCh = i; 					
;;;49     				}
;;;50     			}
;;;51     	} else if (*SetZeroCmnd & 0x00FFFFFF) {
;;;52     			/* Каналы в которых необходимо установить нули	*/
;;;53     			ChsToZero = *SetZeroCmnd & 0x00FFFFFF;																		
;;;54     			*SetZeroCmnd = 0; 
;;;55     			/* Ищем первый канал для установки 0	*/
;;;56     			i = 0;	while ((ChsToZero & (1ul << i)) == 0) {i++;}
;;;57     			/* Сбрасываем в маске текущий канал		*/
;;;58     			ChsToZero &= ~(1ul << i);
;;;59     			CurrCh = i; 
;;;60     			FiltCount = 1000;
;;;61     		}
;;;62     }
0000c2  bf1c              ITT      NE
0000c4  e8bd03f0          POPNE    {r4-r9}
0000c8  4770              BXNE     lr
0000ca  f8a10e30          STRH     r0,[r1,#0xe30]        ;39
0000ce  6819              LDR      r1,[r3,#0]            ;40  ; ChsToZero
0000d0  2900              CMP      r1,#0                 ;40
0000d2  bf04              ITT      EQ
0000d4  e8bd03f0          POPEQ    {r4-r9}
0000d8  4770              BXEQ     lr
0000da  1c60              ADDS     r0,r4,#1              ;44
0000dc  e9c3c502          STRD     r12,r5,[r3,#8]        ;44
0000e0  fa02fc00          LSL      r12,r2,r0             ;45
0000e4  ea1c0f01          TST      r12,r1                ;45
0000e8  d105              BNE      |L1.246|
                  |L1.234|
0000ea  1c40              ADDS     r0,r0,#1              ;45
0000ec  fa02fc00          LSL      r12,r2,r0             ;45
0000f0  ea1c0f01          TST      r12,r1                ;45
0000f4  d0f9              BEQ      |L1.234|
                  |L1.246|
0000f6  4082              LSLS     r2,r2,r0              ;47
0000f8  4391              BICS     r1,r1,r2              ;47
0000fa  e017              B        |L1.300|
                  |L1.252|
0000fc  6801              LDR      r1,[r0,#0]            ;51
0000fe  f031447f          BICS     r4,r1,#0xff000000     ;51
000102  bf04              ITT      EQ
000104  e8bd03f0          POPEQ    {r4-r9}
000108  4770              BXEQ     lr
00010a  f021417f          BIC      r1,r1,#0xff000000     ;53
00010e  6019              STR      r1,[r3,#0]            ;54  ; ChsToZero
000110  6005              STR      r5,[r0,#0]            ;56
000112  2000              MOVS     r0,#0                 ;56
000114  f0110f01          TST      r1,#1                 ;56
000118  d104              BNE      |L1.292|
                  |L1.282|
00011a  1c40              ADDS     r0,r0,#1              ;56
00011c  fa02f400          LSL      r4,r2,r0              ;56
000120  420c              TST      r4,r1                 ;56
000122  d0fa              BEQ      |L1.282|
                  |L1.292|
000124  4082              LSLS     r2,r2,r0              ;58
000126  4391              BICS     r1,r1,r2              ;58
000128  f8c3c008          STR      r12,[r3,#8]           ;60  ; FiltCount
                  |L1.300|
00012c  e9c31000          STRD     r1,r0,[r3,#0]         ;60
000130  e8bd03f0          POP      {r4-r9}
000134  4770              BX       lr
;;;63     
                          ENDP

                  AP_REG32 PROC
;;;64     int AP_REG32(int x, int Ti, long long *Buffer) {
000136  e9d2c300          LDRD     r12,r3,[r2,#0]
;;;65     	*Buffer += (long long)__QSUB(x, *Buffer >> 32) * Ti;
00013a  fa83f0a0          QSUB     r0,r0,r3
00013e  fb801001          SMULL    r1,r0,r0,r1
000142  eb1c0101          ADDS     r1,r12,r1
000146  4158              ADCS     r0,r0,r3
000148  e9c21000          STRD     r1,r0,[r2,#0]
;;;66     	return *Buffer >> 32;
;;;67     }
00014c  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  ChsToZero
                          DCD      0x00000000
                  CurrCh
                          DCD      0x00000000
                  FiltCount
                          DCD      0x00000000
                  Buffer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "SOURCE\\StdFunc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_StdFunc_c_75f49f43____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___9_StdFunc_c_75f49f43____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_StdFunc_c_75f49f43____REVSH|
#line 144
|__asm___9_StdFunc_c_75f49f43____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
