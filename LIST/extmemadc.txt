; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --no_integer_literal_pools --list -c --asm --interleave -o.\exec\extmemadc.o --asm_dir=.\LIST\ --list_dir=.\LIST\ --depend=.\exec\extmemadc.d --cpu=Cortex-M4.fp --apcs=interwork -Otime --diag_suppress=9931 -I.\STARTUP -I.\PERIPH -I..\PRG1 -I.\SOURCE -IF:\Program\Keil_v5\ARM\RV31\INC -IF:\Program\Keil_v5\ARM\CMSIS\Include -IF:\Program\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=524 -DEK_PP_0815_12_03 -DSTM32F429_439xx --omf_browse=.\exec\extmemadc.crf PERIPH\Extmemadc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  InitExtMem PROC
;;;16     
;;;17     void InitExtMem(void) {
000000  f6430038          MOV      r0,#0x3838
;;;18     	
;;;19     	if (RCC->AHB3ENR & RCC_AHB3ENR_FMCEN) return;				/*Уже инициализировано*/
000004  f2c40002          MOVT     r0,#0x4002
000008  6801              LDR      r1,[r0,#0]
00000a  f0110f01          TST      r1,#1
;;;20     
;;;21       /* Enable the FMC/FSMC interface clock */
;;;22       RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;	
;;;23     
;;;24     #if  defined (EK_PP_0215_12_02) || defined (EK_PP_0815_12_03)	
;;;25       /* Configure and enable Bank0&1_SRAM2 */
;;;26       FMC_Bank1->BTCR[0]  = 0x00005011;		/*BCR - register	*/
;;;27       FMC_Bank1->BTCR[1]  = 0x00020302;		/*BTR - register	*/
;;;28       FMC_Bank1E->BWTR[0] = 0x00020202;		/*BWTR - register	*/	
;;;29     
;;;30       FMC_Bank1->BTCR[2]  = 0x00005011;		/*BCR - register	*/
;;;31       FMC_Bank1->BTCR[3]  = 0x00020302;		/*BTR - register	*/
;;;32       FMC_Bank1E->BWTR[2] = 0x00020202;		/*BWTR - register	*/	
;;;33     	
;;;34     #elif defined (EK_PP_0215_12_00) || defined (EK_PP_0215_12_01) 
;;;35     	/* Configure and enable Bank1_SRAM2 */
;;;36       FMC_Bank1->BTCR[2]  = 0x00005011;		/*BCR - register	*/
;;;37       FMC_Bank1->BTCR[3]  = 0x00020302;		/*BTR - register	*/
;;;38       FMC_Bank1E->BWTR[2] = 0x00020202;		/*BWTR - register	*/	
;;;39     #endif
;;;40     
;;;41     #if defined (EK_PP_0215_12_00) || defined (EK_PP_0215_12_01) || defined (EK_PP_0215_12_02) || defined (EK_PP_0815_12_03)
;;;42     
;;;43     	ADC_CONVST(ADC_CONVST_OFF);
;;;44     	ADC_RESET(ADC_RESET_ON);
;;;45     
;;;46     	/* Инициализация внешнего АЦП					*/	
;;;47       FMC_Bank1->BTCR[4]  = 0x00005011;		/*BCR - register	*/
;;;48       FMC_Bank1->BTCR[5]  = 0x00020403;		/*BTR - register	*/
;;;49       FMC_Bank1E->BWTR[4] = 0x00020403;		/*BWTR - register	*/		
;;;50     
;;;51     	ADC_RESET(ADC_RESET_OFF);
;;;52     	
;;;53     #endif	
;;;54     }
00000e  bf18              IT       NE
000010  4770              BXNE     lr
000012  6801              LDR      r1,[r0,#0]            ;22
000014  f0410101          ORR      r1,r1,#1              ;22
000018  6001              STR      r1,[r0,#0]            ;22
00001a  f04f4020          MOV      r0,#0xa0000000        ;26
00001e  f2450311          MOV      r3,#0x5011            ;26
000022  6003              STR      r3,[r0,#0]            ;26
000024  f2403102          MOV      r1,#0x302             ;27
000028  f2c00102          MOVT     r1,#2                 ;27
00002c  6041              STR      r1,[r0,#4]            ;27
00002e  f2402202          MOV      r2,#0x202             ;28
000032  f2c00202          MOVT     r2,#2                 ;28
000036  f8c02104          STR      r2,[r0,#0x104]        ;28
00003a  6083              STR      r3,[r0,#8]            ;30
00003c  60c1              STR      r1,[r0,#0xc]          ;31
00003e  f8c0210c          STR      r2,[r0,#0x10c]        ;32
000042  f44f4c00          MOV      r12,#0x8000           ;43
000046  f2c42c40          MOVT     r12,#0x4240           ;43
00004a  2100              MOVS     r1,#0                 ;43
00004c  f8cc1284          STR      r1,[r12,#0x284]       ;43
000050  2201              MOVS     r2,#1                 ;44
000052  f8cc2288          STR      r2,[r12,#0x288]       ;44
000056  6103              STR      r3,[r0,#0x10]         ;47
000058  f2404203          MOV      r2,#0x403             ;48
00005c  f2c00202          MOVT     r2,#2                 ;48
000060  6142              STR      r2,[r0,#0x14]         ;48
000062  f8c02114          STR      r2,[r0,#0x114]        ;49
000066  f8cc1288          STR      r1,[r12,#0x288]       ;51
00006a  4770              BX       lr
;;;55     
                          ENDP

                  InitTrgExtADC PROC
;;;56     
;;;57     void InitTrgExtADC(int freq) {
00006c  f44f6180          MOV      r1,#0x400
;;;58     	
;;;59     #if defined (EK_PP_0215_12_02) || defined (EK_PP_0815_12_03)
;;;60     TIM_TypeDef	*TIM = TIM3;
000070  f2c40100          MOVT     r1,#0x4000
;;;61     
;;;62     	PrgData.pExtADCArray = PrgData.ExtADCArray;
000074  f2400200          MOVW     r2,#:LOWER16: Metro+9728
000078  f2c00200          MOVT     r2,#:UPPER16: Metro+9728
00007c  f5a263c0          SUB      r3,r2,#0x600
;;;63     	
;;;64     	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
000080  f8c32800          STR      r2,[r3,#0x800]  ; Metro
000084  f44f5261          MOV      r2,#0x3840
000088  f2c40202          MOVT     r2,#0x4002
00008c  6813              LDR      r3,[r2,#0]
00008e  f0430302          ORR      r3,r3,#2
000092  6013              STR      r3,[r2,#0]
;;;65     	TIM->PSC 		= 0;
000094  2200              MOVS     r2,#0
000096  850a              STRH     r2,[r1,#0x28]
;;;66     	TIM->ARR 		= (APB1CLK * 2) / freq - 1;						/*											*/
000098  f2400200          MOVW     r2,#:LOWER16: SystemCoreClock
00009c  f2c00200          MOVT     r2,#:UPPER16: SystemCoreClock
0000a0  6812              LDR      r2,[r2,#0]  ; SystemCoreClock
0000a2  0892              LSRS     r2,r2,#2
0000a4  0052              LSLS     r2,r2,#1
0000a6  fbb2f0f0          UDIV     r0,r2,r0
0000aa  1e40              SUBS     r0,r0,#1
0000ac  62c8              STR      r0,[r1,#0x2c]
;;;67     	TIM->CCR4 	= (APB1CLK * 2) / 200000; 						/* 5 мкс								*/
0000ae  f44f6054          MOV      r0,#0xd40
0000b2  f2c00003          MOVT     r0,#3
0000b6  fbb2f0f0          UDIV     r0,r2,r0
0000ba  6408              STR      r0,[r1,#0x40]
;;;68     	
;;;69     	if (ADCxCycle == 1)	
;;;70     	{
;;;71     		TIM->CNT 		= 0xFFFF;														/*											*/
;;;72     	}
;;;73     	else
;;;74     	{
;;;75     		TIM->CNT		= 0xFFFF - TIM->ARR;
0000bc  6ac8              LDR      r0,[r1,#0x2c]
0000be  f64f72ff          MOV      r2,#0xffff
0000c2  1a10              SUBS     r0,r2,r0
0000c4  6248              STR      r0,[r1,#0x24]
;;;76     	}		
;;;77     	
;;;78     	TIM->CCMR2 	= (0x68ul << 8);											/* PWM Mode 1						*/
0000c6  f44f40d0          MOV      r0,#0x6800
0000ca  8388              STRH     r0,[r1,#0x1c]
;;;79       TIM->DIER 	= TIM_DIER_CC4IE;											/*											*/
0000cc  2010              MOVS     r0,#0x10
0000ce  8188              STRH     r0,[r1,#0xc]
;;;80     	TIM->CCER		=	TIM_CCER_CC4E;	
0000d0  0200              LSLS     r0,r0,#8
0000d2  8408              STRH     r0,[r1,#0x20]
;;;81     	/*TIM3 включается от TIM1																																					*/
;;;82     	TIM->SMCR		= TIM_SMCR_SMS_Gate;
0000d4  2005              MOVS     r0,#5
0000d6  8108              STRH     r0,[r1,#8]
;;;83     	
;;;84     	TIM->CR2		= TIM_CR2_MMS_OC4;										/* Запускаем внутреннее АЦП											*/
0000d8  2070              MOVS     r0,#0x70
0000da  8088              STRH     r0,[r1,#4]
;;;85     	
;;;86     	TIM->CR1		= (TIM_CR1_ARPE | TIM_CR1_CEN);
0000dc  2081              MOVS     r0,#0x81
0000de  8008              STRH     r0,[r1,#0]
0000e0  f24e011d          MOV      r1,#0xe01d
0000e4  f2ce0100          MOVT     r1,#0xe000
0000e8  2020              MOVS     r0,#0x20
0000ea  f8810400          STRB     r0,[r1,#0x400]
0000ee  f04f21e0          MOV      r1,#0xe000e000
0000f2  0600              LSLS     r0,r0,#24
0000f4  f8c10100          STR      r0,[r1,#0x100]
;;;87     
;;;88     	NVIC_SetPriority(TIM3_IRQn,TIM3_Prty);
;;;89     	NVIC_EnableIRQ(TIM3_IRQn);												/*				*/
;;;90     #endif
;;;91     	
;;;92     }
0000f8  4770              BX       lr
;;;93     
                          ENDP

                  TIM3_IRQHandler PROC
;;;94     void TIM3_IRQHandler(void) {
0000fa  f44f6182          MOV      r1,#0x410
;;;95     int i;
;;;96     	TIM3->SR = ~TIM_SR_CC4IF;
0000fe  f2c40100          MOVT     r1,#0x4000
000102  f64f70ef          MOV      r0,#0xffef
000106  8008              STRH     r0,[r1,#0]
;;;97     	for (i = 0; i < 16; i++) *PrgData.pExtADCArray++ = ExtADC[i];
000108  2100              MOVS     r1,#0
00010a  f2400200          MOVW     r2,#:LOWER16: ||.ARM.__AT_0x68000000||
00010e  f2c00200          MOVT     r2,#:UPPER16: ||.ARM.__AT_0x68000000||
000112  f2400000          MOVW     r0,#:LOWER16: Metro+8192
000116  f2c00000          MOVT     r0,#:UPPER16: Metro+8192
                  |L1.282|
00011a  f8d0c800          LDR      r12,[r0,#0x800]  ; Metro
00011e  f8323011          LDRH     r3,[r2,r1,LSL #1]
000122  1c49              ADDS     r1,r1,#1
000124  f8ac3000          STRH     r3,[r12,#0]
000128  f8d03800          LDR      r3,[r0,#0x800]  ; Metro
00012c  1c9b              ADDS     r3,r3,#2
00012e  f8c03800          STR      r3,[r0,#0x800]  ; Metro
000132  2910              CMP      r1,#0x10
000134  dbf1              BLT      |L1.282|
;;;98     	if (PrgData.pExtADCArray == &PrgData.ExtADCArray[16*ADCxCycle]) PrgData.pExtADCArray = PrgData.ExtADCArray;
000136  f2400200          MOVW     r2,#:LOWER16: Metro+9984
00013a  f2c00200          MOVT     r2,#:UPPER16: Metro+9984
00013e  4293              CMP      r3,r2
;;;99     }
000140  bf18              IT       NE
000142  4770              BXNE     lr
000144  f2400100          MOVW     r1,#:LOWER16: Metro+9728
000148  f2c00100          MOVT     r1,#:UPPER16: Metro+9728
00014c  f8c01800          STR      r1,[r0,#0x800]        ;98  ; Metro
000150  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||.ARM.__AT_0x63F00000||, DATA, NOINIT, ALIGN=2

                  ExtMem
                          %        2097152

                          AREA ||.ARM.__AT_0x68000000||, DATA, NOINIT, ALIGN=1

                  ExtADC
                          %        32

;*** Start embedded assembler ***

#line 1 "PERIPH\\Extmemadc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_Extmemadc_c_e3a6ca0c____REV16|
#line 129 ".\\STARTUP\\core_cmInstr.h"
|__asm___11_Extmemadc_c_e3a6ca0c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_Extmemadc_c_e3a6ca0c____REVSH|
#line 144
|__asm___11_Extmemadc_c_e3a6ca0c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
